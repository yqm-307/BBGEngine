// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbservice.proto

#include "dbservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommReqData_dbservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommRespData_dbservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlConfig_dbservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedisConfig_dbservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleData_dbservice_2eproto;
class DB_PING_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_PING_REQ> _instance;
} _DB_PING_REQ_default_instance_;
class DB_PING_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_PING_RESP> _instance;
} _DB_PING_RESP_default_instance_;
class DB_HEART_BEAT_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_HEART_BEAT_REQ> _instance;
} _DB_HEART_BEAT_REQ_default_instance_;
class DB_HEART_BEAT_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_HEART_BEAT_RESP> _instance;
} _DB_HEART_BEAT_RESP_default_instance_;
class CommReqDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommReqData> _instance;
} _CommReqData_default_instance_;
class CommRespDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommRespData> _instance;
} _CommRespData_default_instance_;
class RedisConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedisConfig> _instance;
} _RedisConfig_default_instance_;
class MysqlConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlConfig> _instance;
} _MysqlConfig_default_instance_;
class RoleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleData> _instance;
} _RoleData_default_instance_;
class DB_INIT_DYNAIMC_CONFIG_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_INIT_DYNAIMC_CONFIG_REQ> _instance;
} _DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_;
class DB_INIT_DYNAMIC_CONFIG_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_INIT_DYNAMIC_CONFIG_RESP> _instance;
} _DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_;
class DB_GET_ALL_ROLE_PWD_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_GET_ALL_ROLE_PWD_REQ> _instance;
} _DB_GET_ALL_ROLE_PWD_REQ_default_instance_;
class DB_GET_ALL_ROLE_PWD_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_GET_ALL_ROLE_PWD_RESP> _instance;
} _DB_GET_ALL_ROLE_PWD_RESP_default_instance_;
class DB_CREATE_ROLE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_CREATE_ROLE_REQ> _instance;
} _DB_CREATE_ROLE_REQ_default_instance_;
class DB_CREATE_ROLE_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_CREATE_ROLE_RESP> _instance;
} _DB_CREATE_ROLE_RESP_default_instance_;
class DB_LOAD_ROLE_DATA_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_LOAD_ROLE_DATA_REQ> _instance;
} _DB_LOAD_ROLE_DATA_REQ_default_instance_;
class DB_LOAD_ROLE_DATA_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DB_LOAD_ROLE_DATA_RESP> _instance;
} _DB_LOAD_ROLE_DATA_RESP_default_instance_;
static void InitDefaultsscc_info_CommReqData_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommReqData_default_instance_;
    new (ptr) ::CommReqData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommReqData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommReqData_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommReqData_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_CommRespData_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommRespData_default_instance_;
    new (ptr) ::CommRespData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommRespData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommRespData_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommRespData_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_CREATE_ROLE_REQ_default_instance_;
    new (ptr) ::DB_CREATE_ROLE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_CREATE_ROLE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto}, {
      &scc_info_CommReqData_dbservice_2eproto.base,
      &scc_info_RoleData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_CREATE_ROLE_RESP_default_instance_;
    new (ptr) ::DB_CREATE_ROLE_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_CREATE_ROLE_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto}, {
      &scc_info_CommRespData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_GET_ALL_ROLE_PWD_REQ_default_instance_;
    new (ptr) ::DB_GET_ALL_ROLE_PWD_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_GET_ALL_ROLE_PWD_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto}, {
      &scc_info_CommReqData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_GET_ALL_ROLE_PWD_RESP_default_instance_;
    new (ptr) ::DB_GET_ALL_ROLE_PWD_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_GET_ALL_ROLE_PWD_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_DB_HEART_BEAT_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_HEART_BEAT_REQ_default_instance_;
    new (ptr) ::DB_HEART_BEAT_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_HEART_BEAT_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_HEART_BEAT_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_HEART_BEAT_REQ_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_DB_HEART_BEAT_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_HEART_BEAT_RESP_default_instance_;
    new (ptr) ::DB_HEART_BEAT_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_HEART_BEAT_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_HEART_BEAT_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_HEART_BEAT_RESP_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_;
    new (ptr) ::DB_INIT_DYNAIMC_CONFIG_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_INIT_DYNAIMC_CONFIG_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto}, {
      &scc_info_RedisConfig_dbservice_2eproto.base,
      &scc_info_MysqlConfig_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_;
    new (ptr) ::DB_INIT_DYNAMIC_CONFIG_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_INIT_DYNAMIC_CONFIG_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto}, {
      &scc_info_CommRespData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_LOAD_ROLE_DATA_REQ_default_instance_;
    new (ptr) ::DB_LOAD_ROLE_DATA_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_LOAD_ROLE_DATA_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto}, {
      &scc_info_CommReqData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_LOAD_ROLE_DATA_RESP_default_instance_;
    new (ptr) ::DB_LOAD_ROLE_DATA_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_LOAD_ROLE_DATA_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto}, {
      &scc_info_CommRespData_dbservice_2eproto.base,
      &scc_info_RoleData_dbservice_2eproto.base,}};

static void InitDefaultsscc_info_DB_PING_REQ_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_PING_REQ_default_instance_;
    new (ptr) ::DB_PING_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_PING_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_PING_REQ_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_PING_REQ_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_DB_PING_RESP_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DB_PING_RESP_default_instance_;
    new (ptr) ::DB_PING_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DB_PING_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DB_PING_RESP_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DB_PING_RESP_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_MysqlConfig_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MysqlConfig_default_instance_;
    new (ptr) ::MysqlConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MysqlConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlConfig_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlConfig_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_RedisConfig_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RedisConfig_default_instance_;
    new (ptr) ::RedisConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RedisConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedisConfig_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedisConfig_dbservice_2eproto}, {}};

static void InitDefaultsscc_info_RoleData_dbservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoleData_default_instance_;
    new (ptr) ::RoleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleData_dbservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleData_dbservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbservice_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dbservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dbservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_PING_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_PING_REQ, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_PING_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_PING_RESP, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_HEART_BEAT_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_HEART_BEAT_REQ, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_HEART_BEAT_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_HEART_BEAT_RESP, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommReqData, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommRespData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommRespData, status_),
  PROTOBUF_FIELD_OFFSET(::CommRespData, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedisConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedisConfig, redisip_),
  PROTOBUF_FIELD_OFFSET(::RedisConfig, redisport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, ip_),
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, port_),
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, username_),
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, password_),
  PROTOBUF_FIELD_OFFSET(::MysqlConfig, dbname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoleData, rolename_),
  PROTOBUF_FIELD_OFFSET(::RoleData, account_),
  PROTOBUF_FIELD_OFFSET(::RoleData, equipbasedata_),
  PROTOBUF_FIELD_OFFSET(::RoleData, equipextdata_),
  PROTOBUF_FIELD_OFFSET(::RoleData, itemdata_),
  PROTOBUF_FIELD_OFFSET(::RoleData, petdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAIMC_CONFIG_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAIMC_CONFIG_REQ, rediscfg_),
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAIMC_CONFIG_REQ, mysqlcfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAMIC_CONFIG_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAMIC_CONFIG_RESP, commdata_),
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAMIC_CONFIG_RESP, redisconninitsucc_),
  PROTOBUF_FIELD_OFFSET(::DB_INIT_DYNAMIC_CONFIG_RESP, mysqlconninitsucc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_GET_ALL_ROLE_PWD_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_GET_ALL_ROLE_PWD_REQ, commdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_GET_ALL_ROLE_PWD_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_GET_ALL_ROLE_PWD_RESP, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_CREATE_ROLE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_CREATE_ROLE_REQ, commdata_),
  PROTOBUF_FIELD_OFFSET(::DB_CREATE_ROLE_REQ, roledata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_CREATE_ROLE_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_CREATE_ROLE_RESP, commdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_REQ, commdata_),
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_REQ, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_RESP, commdata_),
  PROTOBUF_FIELD_OFFSET(::DB_LOAD_ROLE_DATA_RESP, roledata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DB_PING_REQ)},
  { 6, -1, sizeof(::DB_PING_RESP)},
  { 12, -1, sizeof(::DB_HEART_BEAT_REQ)},
  { 18, -1, sizeof(::DB_HEART_BEAT_RESP)},
  { 24, -1, sizeof(::CommReqData)},
  { 30, -1, sizeof(::CommRespData)},
  { 37, -1, sizeof(::RedisConfig)},
  { 44, -1, sizeof(::MysqlConfig)},
  { 54, -1, sizeof(::RoleData)},
  { 65, -1, sizeof(::DB_INIT_DYNAIMC_CONFIG_REQ)},
  { 72, -1, sizeof(::DB_INIT_DYNAMIC_CONFIG_RESP)},
  { 80, -1, sizeof(::DB_GET_ALL_ROLE_PWD_REQ)},
  { 86, -1, sizeof(::DB_GET_ALL_ROLE_PWD_RESP)},
  { 92, -1, sizeof(::DB_CREATE_ROLE_REQ)},
  { 99, -1, sizeof(::DB_CREATE_ROLE_RESP)},
  { 105, -1, sizeof(::DB_LOAD_ROLE_DATA_REQ)},
  { 112, -1, sizeof(::DB_LOAD_ROLE_DATA_RESP)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_PING_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_PING_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_HEART_BEAT_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_HEART_BEAT_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommReqData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommRespData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RedisConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MysqlConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_GET_ALL_ROLE_PWD_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_GET_ALL_ROLE_PWD_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_CREATE_ROLE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_CREATE_ROLE_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_LOAD_ROLE_DATA_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DB_LOAD_ROLE_DATA_RESP_default_instance_),
};

const char descriptor_table_protodef_dbservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dbservice.proto\" \n\013DB_PING_REQ\022\021\n\tTime"
  "stamp\030\001 \001(\003\"!\n\014DB_PING_RESP\022\021\n\tTimeStamp"
  "\030\001 \001(\003\"&\n\021DB_HEART_BEAT_REQ\022\021\n\tTimestamp"
  "\030\001 \001(\003\"\'\n\022DB_HEART_BEAT_RESP\022\021\n\tTimestam"
  "p\030\001 \001(\003\"\037\n\013CommReqData\022\020\n\010ServerId\030\001 \001(\005"
  "\"+\n\014CommRespData\022\016\n\006Status\030\001 \001(\010\022\013\n\003Msg\030"
  "\002 \001(\t\"1\n\013RedisConfig\022\017\n\007RedisIP\030\001 \001(\t\022\021\n"
  "\tRedisPort\030\002 \001(\005\"[\n\013MysqlConfig\022\n\n\002IP\030\001 "
  "\001(\t\022\014\n\004Port\030\002 \001(\005\022\020\n\010Username\030\003 \001(\t\022\020\n\010P"
  "assword\030\004 \001(\t\022\016\n\006DBName\030\005 \001(\t\"}\n\010RoleDat"
  "a\022\020\n\010RoleName\030\002 \001(\t\022\017\n\007Account\030\003 \001(\t\022\025\n\r"
  "EquipBaseData\030\004 \001(\t\022\024\n\014EquipExtData\030\005 \001("
  "\t\022\020\n\010ItemData\030\006 \001(\t\022\017\n\007PetData\030\007 \001(\t\"\\\n\032"
  "DB_INIT_DYNAIMC_CONFIG_REQ\022\036\n\010RedisCfg\030\001"
  " \001(\0132\014.RedisConfig\022\036\n\010MysqlCfg\030\002 \001(\0132\014.M"
  "ysqlConfig\"t\n\033DB_INIT_DYNAMIC_CONFIG_RES"
  "P\022\037\n\010CommData\030\001 \001(\0132\r.CommRespData\022\031\n\021Re"
  "disConnInitSucc\030\002 \001(\010\022\031\n\021MysqlConnInitSu"
  "cc\030\003 \001(\010\"9\n\027DB_GET_ALL_ROLE_PWD_REQ\022\036\n\010C"
  "ommData\030\001 \001(\0132\014.CommReqData\"\'\n\030DB_GET_AL"
  "L_ROLE_PWD_RESP\022\013\n\003Pwd\030\001 \003(\t\"Q\n\022DB_CREAT"
  "E_ROLE_REQ\022\036\n\010CommData\030\001 \001(\0132\014.CommReqDa"
  "ta\022\033\n\010RoleData\030\002 \001(\0132\t.RoleData\"6\n\023DB_CR"
  "EATE_ROLE_RESP\022\037\n\010CommData\030\001 \001(\0132\r.CommR"
  "espData\"G\n\025DB_LOAD_ROLE_DATA_REQ\022\036\n\010Comm"
  "Data\030\001 \001(\0132\014.CommReqData\022\016\n\006RoleId\030\002 \001(\005"
  "\"V\n\026DB_LOAD_ROLE_DATA_RESP\022\037\n\010CommData\030\001"
  " \001(\0132\r.CommRespData\022\033\n\010RoleData\030\002 \001(\0132\t."
  "RoleDataB\007Z\005./;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dbservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dbservice_2eproto_sccs[17] = {
  &scc_info_CommReqData_dbservice_2eproto.base,
  &scc_info_CommRespData_dbservice_2eproto.base,
  &scc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto.base,
  &scc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto.base,
  &scc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto.base,
  &scc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto.base,
  &scc_info_DB_HEART_BEAT_REQ_dbservice_2eproto.base,
  &scc_info_DB_HEART_BEAT_RESP_dbservice_2eproto.base,
  &scc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto.base,
  &scc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto.base,
  &scc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto.base,
  &scc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto.base,
  &scc_info_DB_PING_REQ_dbservice_2eproto.base,
  &scc_info_DB_PING_RESP_dbservice_2eproto.base,
  &scc_info_MysqlConfig_dbservice_2eproto.base,
  &scc_info_RedisConfig_dbservice_2eproto.base,
  &scc_info_RoleData_dbservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbservice_2eproto = {
  false, false, descriptor_table_protodef_dbservice_2eproto, "dbservice.proto", 1145,
  &descriptor_table_dbservice_2eproto_once, descriptor_table_dbservice_2eproto_sccs, descriptor_table_dbservice_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_dbservice_2eproto::offsets,
  file_level_metadata_dbservice_2eproto, 17, file_level_enum_descriptors_dbservice_2eproto, file_level_service_descriptors_dbservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dbservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dbservice_2eproto)), true);

// ===================================================================

void DB_PING_REQ::InitAsDefaultInstance() {
}
class DB_PING_REQ::_Internal {
 public:
};

DB_PING_REQ::DB_PING_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_PING_REQ)
}
DB_PING_REQ::DB_PING_REQ(const DB_PING_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:DB_PING_REQ)
}

void DB_PING_REQ::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

DB_PING_REQ::~DB_PING_REQ() {
  // @@protoc_insertion_point(destructor:DB_PING_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_PING_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DB_PING_REQ::ArenaDtor(void* object) {
  DB_PING_REQ* _this = reinterpret_cast< DB_PING_REQ* >(object);
  (void)_this;
}
void DB_PING_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_PING_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_PING_REQ& DB_PING_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_PING_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_PING_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_PING_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_PING_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_PING_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_PING_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_PING_REQ)
  return target;
}

size_t DB_PING_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_PING_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_PING_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_PING_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_PING_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_PING_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_PING_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_PING_REQ)
    MergeFrom(*source);
  }
}

void DB_PING_REQ::MergeFrom(const DB_PING_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_PING_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DB_PING_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_PING_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PING_REQ::CopyFrom(const DB_PING_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_PING_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PING_REQ::IsInitialized() const {
  return true;
}

void DB_PING_REQ::InternalSwap(DB_PING_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_PING_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_PING_RESP::InitAsDefaultInstance() {
}
class DB_PING_RESP::_Internal {
 public:
};

DB_PING_RESP::DB_PING_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_PING_RESP)
}
DB_PING_RESP::DB_PING_RESP(const DB_PING_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:DB_PING_RESP)
}

void DB_PING_RESP::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

DB_PING_RESP::~DB_PING_RESP() {
  // @@protoc_insertion_point(destructor:DB_PING_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_PING_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DB_PING_RESP::ArenaDtor(void* object) {
  DB_PING_RESP* _this = reinterpret_cast< DB_PING_RESP* >(object);
  (void)_this;
}
void DB_PING_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_PING_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_PING_RESP& DB_PING_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_PING_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_PING_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_PING_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_PING_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_PING_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_PING_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 TimeStamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_PING_RESP)
  return target;
}

size_t DB_PING_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_PING_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TimeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_PING_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_PING_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_PING_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_PING_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_PING_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_PING_RESP)
    MergeFrom(*source);
  }
}

void DB_PING_RESP::MergeFrom(const DB_PING_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_PING_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DB_PING_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_PING_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_PING_RESP::CopyFrom(const DB_PING_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_PING_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_PING_RESP::IsInitialized() const {
  return true;
}

void DB_PING_RESP::InternalSwap(DB_PING_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_PING_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_HEART_BEAT_REQ::InitAsDefaultInstance() {
}
class DB_HEART_BEAT_REQ::_Internal {
 public:
};

DB_HEART_BEAT_REQ::DB_HEART_BEAT_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_HEART_BEAT_REQ)
}
DB_HEART_BEAT_REQ::DB_HEART_BEAT_REQ(const DB_HEART_BEAT_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:DB_HEART_BEAT_REQ)
}

void DB_HEART_BEAT_REQ::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

DB_HEART_BEAT_REQ::~DB_HEART_BEAT_REQ() {
  // @@protoc_insertion_point(destructor:DB_HEART_BEAT_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_HEART_BEAT_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DB_HEART_BEAT_REQ::ArenaDtor(void* object) {
  DB_HEART_BEAT_REQ* _this = reinterpret_cast< DB_HEART_BEAT_REQ* >(object);
  (void)_this;
}
void DB_HEART_BEAT_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_HEART_BEAT_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_HEART_BEAT_REQ& DB_HEART_BEAT_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_HEART_BEAT_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_HEART_BEAT_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_HEART_BEAT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_HEART_BEAT_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_HEART_BEAT_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_HEART_BEAT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_HEART_BEAT_REQ)
  return target;
}

size_t DB_HEART_BEAT_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_HEART_BEAT_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_HEART_BEAT_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_HEART_BEAT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_HEART_BEAT_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_HEART_BEAT_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_HEART_BEAT_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_HEART_BEAT_REQ)
    MergeFrom(*source);
  }
}

void DB_HEART_BEAT_REQ::MergeFrom(const DB_HEART_BEAT_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_HEART_BEAT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DB_HEART_BEAT_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_HEART_BEAT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HEART_BEAT_REQ::CopyFrom(const DB_HEART_BEAT_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_HEART_BEAT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HEART_BEAT_REQ::IsInitialized() const {
  return true;
}

void DB_HEART_BEAT_REQ::InternalSwap(DB_HEART_BEAT_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_HEART_BEAT_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_HEART_BEAT_RESP::InitAsDefaultInstance() {
}
class DB_HEART_BEAT_RESP::_Internal {
 public:
};

DB_HEART_BEAT_RESP::DB_HEART_BEAT_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_HEART_BEAT_RESP)
}
DB_HEART_BEAT_RESP::DB_HEART_BEAT_RESP(const DB_HEART_BEAT_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:DB_HEART_BEAT_RESP)
}

void DB_HEART_BEAT_RESP::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

DB_HEART_BEAT_RESP::~DB_HEART_BEAT_RESP() {
  // @@protoc_insertion_point(destructor:DB_HEART_BEAT_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_HEART_BEAT_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DB_HEART_BEAT_RESP::ArenaDtor(void* object) {
  DB_HEART_BEAT_RESP* _this = reinterpret_cast< DB_HEART_BEAT_RESP* >(object);
  (void)_this;
}
void DB_HEART_BEAT_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_HEART_BEAT_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_HEART_BEAT_RESP& DB_HEART_BEAT_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_HEART_BEAT_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_HEART_BEAT_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_HEART_BEAT_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_HEART_BEAT_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_HEART_BEAT_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_HEART_BEAT_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_HEART_BEAT_RESP)
  return target;
}

size_t DB_HEART_BEAT_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_HEART_BEAT_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_HEART_BEAT_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_HEART_BEAT_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_HEART_BEAT_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_HEART_BEAT_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_HEART_BEAT_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_HEART_BEAT_RESP)
    MergeFrom(*source);
  }
}

void DB_HEART_BEAT_RESP::MergeFrom(const DB_HEART_BEAT_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_HEART_BEAT_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DB_HEART_BEAT_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_HEART_BEAT_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_HEART_BEAT_RESP::CopyFrom(const DB_HEART_BEAT_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_HEART_BEAT_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_HEART_BEAT_RESP::IsInitialized() const {
  return true;
}

void DB_HEART_BEAT_RESP::InternalSwap(DB_HEART_BEAT_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_HEART_BEAT_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommReqData::InitAsDefaultInstance() {
}
class CommReqData::_Internal {
 public:
};

CommReqData::CommReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommReqData)
}
CommReqData::CommReqData(const CommReqData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:CommReqData)
}

void CommReqData::SharedCtor() {
  serverid_ = 0;
}

CommReqData::~CommReqData() {
  // @@protoc_insertion_point(destructor:CommReqData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommReqData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommReqData::ArenaDtor(void* object) {
  CommReqData* _this = reinterpret_cast< CommReqData* >(object);
  (void)_this;
}
void CommReqData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommReqData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommReqData& CommReqData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommReqData_dbservice_2eproto.base);
  return *internal_default_instance();
}


void CommReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:CommReqData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommReqData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommReqData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommReqData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerId = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommReqData)
  return target;
}

size_t CommReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommReqData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ServerId = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommReqData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const CommReqData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommReqData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommReqData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommReqData)
    MergeFrom(*source);
  }
}

void CommReqData::MergeFrom(const CommReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void CommReqData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommReqData::CopyFrom(const CommReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommReqData::IsInitialized() const {
  return true;
}

void CommReqData::InternalSwap(CommReqData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommReqData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommRespData::InitAsDefaultInstance() {
}
class CommRespData::_Internal {
 public:
};

CommRespData::CommRespData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommRespData)
}
CommRespData::CommRespData(const CommRespData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:CommRespData)
}

void CommRespData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommRespData_dbservice_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

CommRespData::~CommRespData() {
  // @@protoc_insertion_point(destructor:CommRespData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommRespData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommRespData::ArenaDtor(void* object) {
  CommRespData* _this = reinterpret_cast< CommRespData* >(object);
  (void)_this;
}
void CommRespData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommRespData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommRespData& CommRespData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommRespData_dbservice_2eproto.base);
  return *internal_default_instance();
}


void CommRespData::Clear() {
// @@protoc_insertion_point(message_clear_start:CommRespData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommRespData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommRespData.Msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommRespData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommRespData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string Msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CommRespData.Msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommRespData)
  return target;
}

size_t CommRespData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommRespData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool Status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommRespData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommRespData)
  GOOGLE_DCHECK_NE(&from, this);
  const CommRespData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommRespData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommRespData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommRespData)
    MergeFrom(*source);
  }
}

void CommRespData::MergeFrom(const CommRespData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommRespData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CommRespData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommRespData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommRespData::CopyFrom(const CommRespData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommRespData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommRespData::IsInitialized() const {
  return true;
}

void CommRespData::InternalSwap(CommRespData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommRespData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedisConfig::InitAsDefaultInstance() {
}
class RedisConfig::_Internal {
 public:
};

RedisConfig::RedisConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedisConfig)
}
RedisConfig::RedisConfig(const RedisConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redisip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redisip().empty()) {
    redisip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_redisip(),
      GetArena());
  }
  redisport_ = from.redisport_;
  // @@protoc_insertion_point(copy_constructor:RedisConfig)
}

void RedisConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedisConfig_dbservice_2eproto.base);
  redisip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redisport_ = 0;
}

RedisConfig::~RedisConfig() {
  // @@protoc_insertion_point(destructor:RedisConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedisConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  redisip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedisConfig::ArenaDtor(void* object) {
  RedisConfig* _this = reinterpret_cast< RedisConfig* >(object);
  (void)_this;
}
void RedisConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedisConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedisConfig& RedisConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedisConfig_dbservice_2eproto.base);
  return *internal_default_instance();
}


void RedisConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RedisConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redisip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  redisport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedisConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string RedisIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_redisip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RedisConfig.RedisIP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RedisPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          redisport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedisConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedisConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string RedisIP = 1;
  if (this->redisip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redisip().data(), static_cast<int>(this->_internal_redisip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RedisConfig.RedisIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_redisip(), target);
  }

  // int32 RedisPort = 2;
  if (this->redisport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_redisport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedisConfig)
  return target;
}

size_t RedisConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedisConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RedisIP = 1;
  if (this->redisip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redisip());
  }

  // int32 RedisPort = 2;
  if (this->redisport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_redisport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedisConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedisConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedisConfig)
    MergeFrom(*source);
  }
}

void RedisConfig::MergeFrom(const RedisConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.redisip().size() > 0) {
    _internal_set_redisip(from._internal_redisip());
  }
  if (from.redisport() != 0) {
    _internal_set_redisport(from._internal_redisport());
  }
}

void RedisConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConfig::CopyFrom(const RedisConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisConfig::IsInitialized() const {
  return true;
}

void RedisConfig::InternalSwap(RedisConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  redisip_.Swap(&other->redisip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(redisport_, other->redisport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedisConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MysqlConfig::InitAsDefaultInstance() {
}
class MysqlConfig::_Internal {
 public:
};

MysqlConfig::MysqlConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MysqlConfig)
}
MysqlConfig::MysqlConfig(const MysqlConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dbname().empty()) {
    dbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dbname(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:MysqlConfig)
}

void MysqlConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlConfig_dbservice_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

MysqlConfig::~MysqlConfig() {
  // @@protoc_insertion_point(destructor:MysqlConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MysqlConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlConfig::ArenaDtor(void* object) {
  MysqlConfig* _this = reinterpret_cast< MysqlConfig* >(object);
  (void)_this;
}
void MysqlConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MysqlConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlConfig& MysqlConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlConfig_dbservice_2eproto.base);
  return *internal_default_instance();
}


void MysqlConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MysqlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dbname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string IP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MysqlConfig.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MysqlConfig.Username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MysqlConfig.Password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DBName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MysqlConfig.DBName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MysqlConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MysqlConfig.IP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 Port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string Username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MysqlConfig.Username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string Password = 4;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MysqlConfig.Password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string DBName = 5;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MysqlConfig.DBName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dbname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MysqlConfig)
  return target;
}

size_t MysqlConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MysqlConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string Username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string DBName = 5;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dbname());
  }

  // int32 Port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MysqlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MysqlConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MysqlConfig)
    MergeFrom(*source);
  }
}

void MysqlConfig::MergeFrom(const MysqlConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MysqlConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.dbname().size() > 0) {
    _internal_set_dbname(from._internal_dbname());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void MysqlConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MysqlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlConfig::CopyFrom(const MysqlConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MysqlConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlConfig::IsInitialized() const {
  return true;
}

void MysqlConfig::InternalSwap(MysqlConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleData::InitAsDefaultInstance() {
}
class RoleData::_Internal {
 public:
};

RoleData::RoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoleData)
}
RoleData::RoleData(const RoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rolename().empty()) {
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rolename(),
      GetArena());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account(),
      GetArena());
  }
  equipbasedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equipbasedata().empty()) {
    equipbasedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_equipbasedata(),
      GetArena());
  }
  equipextdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equipextdata().empty()) {
    equipextdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_equipextdata(),
      GetArena());
  }
  itemdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_itemdata().empty()) {
    itemdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_itemdata(),
      GetArena());
  }
  petdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_petdata().empty()) {
    petdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_petdata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RoleData)
}

void RoleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleData_dbservice_2eproto.base);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipbasedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipextdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  itemdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  petdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoleData::~RoleData() {
  // @@protoc_insertion_point(destructor:RoleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipbasedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipextdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  itemdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  petdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleData::ArenaDtor(void* object) {
  RoleData* _this = reinterpret_cast< RoleData* >(object);
  (void)_this;
}
void RoleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleData& RoleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleData_dbservice_2eproto.base);
  return *internal_default_instance();
}


void RoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:RoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipbasedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipextdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  itemdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  petdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string RoleName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.RoleName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.Account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EquipBaseData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_equipbasedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.EquipBaseData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EquipExtData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_equipextdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.EquipExtData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ItemData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_itemdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.ItemData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PetData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_petdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoleData.PetData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string RoleName = 2;
  if (this->rolename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.RoleName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rolename(), target);
  }

  // string Account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.Account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  // string EquipBaseData = 4;
  if (this->equipbasedata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_equipbasedata().data(), static_cast<int>(this->_internal_equipbasedata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.EquipBaseData");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_equipbasedata(), target);
  }

  // string EquipExtData = 5;
  if (this->equipextdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_equipextdata().data(), static_cast<int>(this->_internal_equipextdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.EquipExtData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_equipextdata(), target);
  }

  // string ItemData = 6;
  if (this->itemdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_itemdata().data(), static_cast<int>(this->_internal_itemdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.ItemData");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_itemdata(), target);
  }

  // string PetData = 7;
  if (this->petdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_petdata().data(), static_cast<int>(this->_internal_petdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoleData.PetData");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_petdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoleData)
  return target;
}

size_t RoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RoleName = 2;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // string Account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string EquipBaseData = 4;
  if (this->equipbasedata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipbasedata());
  }

  // string EquipExtData = 5;
  if (this->equipextdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_equipextdata());
  }

  // string ItemData = 6;
  if (this->itemdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_itemdata());
  }

  // string PetData = 7;
  if (this->petdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_petdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoleData)
    MergeFrom(*source);
  }
}

void RoleData::MergeFrom(const RoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rolename().size() > 0) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.equipbasedata().size() > 0) {
    _internal_set_equipbasedata(from._internal_equipbasedata());
  }
  if (from.equipextdata().size() > 0) {
    _internal_set_equipextdata(from._internal_equipextdata());
  }
  if (from.itemdata().size() > 0) {
    _internal_set_itemdata(from._internal_itemdata());
  }
  if (from.petdata().size() > 0) {
    _internal_set_petdata(from._internal_petdata());
  }
}

void RoleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleData::CopyFrom(const RoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleData::IsInitialized() const {
  return true;
}

void RoleData::InternalSwap(RoleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rolename_.Swap(&other->rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipbasedata_.Swap(&other->equipbasedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipextdata_.Swap(&other->equipextdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  itemdata_.Swap(&other->itemdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  petdata_.Swap(&other->petdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_INIT_DYNAIMC_CONFIG_REQ::InitAsDefaultInstance() {
  ::_DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_._instance.get_mutable()->rediscfg_ = const_cast< ::RedisConfig*>(
      ::RedisConfig::internal_default_instance());
  ::_DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_._instance.get_mutable()->mysqlcfg_ = const_cast< ::MysqlConfig*>(
      ::MysqlConfig::internal_default_instance());
}
class DB_INIT_DYNAIMC_CONFIG_REQ::_Internal {
 public:
  static const ::RedisConfig& rediscfg(const DB_INIT_DYNAIMC_CONFIG_REQ* msg);
  static const ::MysqlConfig& mysqlcfg(const DB_INIT_DYNAIMC_CONFIG_REQ* msg);
};

const ::RedisConfig&
DB_INIT_DYNAIMC_CONFIG_REQ::_Internal::rediscfg(const DB_INIT_DYNAIMC_CONFIG_REQ* msg) {
  return *msg->rediscfg_;
}
const ::MysqlConfig&
DB_INIT_DYNAIMC_CONFIG_REQ::_Internal::mysqlcfg(const DB_INIT_DYNAIMC_CONFIG_REQ* msg) {
  return *msg->mysqlcfg_;
}
DB_INIT_DYNAIMC_CONFIG_REQ::DB_INIT_DYNAIMC_CONFIG_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_INIT_DYNAIMC_CONFIG_REQ)
}
DB_INIT_DYNAIMC_CONFIG_REQ::DB_INIT_DYNAIMC_CONFIG_REQ(const DB_INIT_DYNAIMC_CONFIG_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rediscfg()) {
    rediscfg_ = new ::RedisConfig(*from.rediscfg_);
  } else {
    rediscfg_ = nullptr;
  }
  if (from._internal_has_mysqlcfg()) {
    mysqlcfg_ = new ::MysqlConfig(*from.mysqlcfg_);
  } else {
    mysqlcfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DB_INIT_DYNAIMC_CONFIG_REQ)
}

void DB_INIT_DYNAIMC_CONFIG_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto.base);
  ::memset(&rediscfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mysqlcfg_) -
      reinterpret_cast<char*>(&rediscfg_)) + sizeof(mysqlcfg_));
}

DB_INIT_DYNAIMC_CONFIG_REQ::~DB_INIT_DYNAIMC_CONFIG_REQ() {
  // @@protoc_insertion_point(destructor:DB_INIT_DYNAIMC_CONFIG_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_INIT_DYNAIMC_CONFIG_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rediscfg_;
  if (this != internal_default_instance()) delete mysqlcfg_;
}

void DB_INIT_DYNAIMC_CONFIG_REQ::ArenaDtor(void* object) {
  DB_INIT_DYNAIMC_CONFIG_REQ* _this = reinterpret_cast< DB_INIT_DYNAIMC_CONFIG_REQ* >(object);
  (void)_this;
}
void DB_INIT_DYNAIMC_CONFIG_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_INIT_DYNAIMC_CONFIG_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_INIT_DYNAIMC_CONFIG_REQ& DB_INIT_DYNAIMC_CONFIG_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_INIT_DYNAIMC_CONFIG_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_INIT_DYNAIMC_CONFIG_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rediscfg_ != nullptr) {
    delete rediscfg_;
  }
  rediscfg_ = nullptr;
  if (GetArena() == nullptr && mysqlcfg_ != nullptr) {
    delete mysqlcfg_;
  }
  mysqlcfg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_INIT_DYNAIMC_CONFIG_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RedisConfig RedisCfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rediscfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MysqlConfig MysqlCfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysqlcfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_INIT_DYNAIMC_CONFIG_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RedisConfig RedisCfg = 1;
  if (this->has_rediscfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rediscfg(this), target, stream);
  }

  // .MysqlConfig MysqlCfg = 2;
  if (this->has_mysqlcfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mysqlcfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_INIT_DYNAIMC_CONFIG_REQ)
  return target;
}

size_t DB_INIT_DYNAIMC_CONFIG_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RedisConfig RedisCfg = 1;
  if (this->has_rediscfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rediscfg_);
  }

  // .MysqlConfig MysqlCfg = 2;
  if (this->has_mysqlcfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mysqlcfg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_INIT_DYNAIMC_CONFIG_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_INIT_DYNAIMC_CONFIG_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_INIT_DYNAIMC_CONFIG_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_INIT_DYNAIMC_CONFIG_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_INIT_DYNAIMC_CONFIG_REQ)
    MergeFrom(*source);
  }
}

void DB_INIT_DYNAIMC_CONFIG_REQ::MergeFrom(const DB_INIT_DYNAIMC_CONFIG_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rediscfg()) {
    _internal_mutable_rediscfg()->::RedisConfig::MergeFrom(from._internal_rediscfg());
  }
  if (from.has_mysqlcfg()) {
    _internal_mutable_mysqlcfg()->::MysqlConfig::MergeFrom(from._internal_mysqlcfg());
  }
}

void DB_INIT_DYNAIMC_CONFIG_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_INIT_DYNAIMC_CONFIG_REQ::CopyFrom(const DB_INIT_DYNAIMC_CONFIG_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_INIT_DYNAIMC_CONFIG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_INIT_DYNAIMC_CONFIG_REQ::IsInitialized() const {
  return true;
}

void DB_INIT_DYNAIMC_CONFIG_REQ::InternalSwap(DB_INIT_DYNAIMC_CONFIG_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_INIT_DYNAIMC_CONFIG_REQ, mysqlcfg_)
      + sizeof(DB_INIT_DYNAIMC_CONFIG_REQ::mysqlcfg_)
      - PROTOBUF_FIELD_OFFSET(DB_INIT_DYNAIMC_CONFIG_REQ, rediscfg_)>(
          reinterpret_cast<char*>(&rediscfg_),
          reinterpret_cast<char*>(&other->rediscfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_INIT_DYNAIMC_CONFIG_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_INIT_DYNAMIC_CONFIG_RESP::InitAsDefaultInstance() {
  ::_DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommRespData*>(
      ::CommRespData::internal_default_instance());
}
class DB_INIT_DYNAMIC_CONFIG_RESP::_Internal {
 public:
  static const ::CommRespData& commdata(const DB_INIT_DYNAMIC_CONFIG_RESP* msg);
};

const ::CommRespData&
DB_INIT_DYNAMIC_CONFIG_RESP::_Internal::commdata(const DB_INIT_DYNAMIC_CONFIG_RESP* msg) {
  return *msg->commdata_;
}
DB_INIT_DYNAMIC_CONFIG_RESP::DB_INIT_DYNAMIC_CONFIG_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_INIT_DYNAMIC_CONFIG_RESP)
}
DB_INIT_DYNAMIC_CONFIG_RESP::DB_INIT_DYNAMIC_CONFIG_RESP(const DB_INIT_DYNAMIC_CONFIG_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommRespData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  ::memcpy(&redisconninitsucc_, &from.redisconninitsucc_,
    static_cast<size_t>(reinterpret_cast<char*>(&mysqlconninitsucc_) -
    reinterpret_cast<char*>(&redisconninitsucc_)) + sizeof(mysqlconninitsucc_));
  // @@protoc_insertion_point(copy_constructor:DB_INIT_DYNAMIC_CONFIG_RESP)
}

void DB_INIT_DYNAMIC_CONFIG_RESP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto.base);
  ::memset(&commdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mysqlconninitsucc_) -
      reinterpret_cast<char*>(&commdata_)) + sizeof(mysqlconninitsucc_));
}

DB_INIT_DYNAMIC_CONFIG_RESP::~DB_INIT_DYNAMIC_CONFIG_RESP() {
  // @@protoc_insertion_point(destructor:DB_INIT_DYNAMIC_CONFIG_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_INIT_DYNAMIC_CONFIG_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
}

void DB_INIT_DYNAMIC_CONFIG_RESP::ArenaDtor(void* object) {
  DB_INIT_DYNAMIC_CONFIG_RESP* _this = reinterpret_cast< DB_INIT_DYNAMIC_CONFIG_RESP* >(object);
  (void)_this;
}
void DB_INIT_DYNAMIC_CONFIG_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_INIT_DYNAMIC_CONFIG_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_INIT_DYNAMIC_CONFIG_RESP& DB_INIT_DYNAMIC_CONFIG_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_INIT_DYNAMIC_CONFIG_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_INIT_DYNAMIC_CONFIG_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  ::memset(&redisconninitsucc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mysqlconninitsucc_) -
      reinterpret_cast<char*>(&redisconninitsucc_)) + sizeof(mysqlconninitsucc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_INIT_DYNAMIC_CONFIG_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommRespData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool RedisConnInitSucc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          redisconninitsucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool MysqlConnInitSucc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mysqlconninitsucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_INIT_DYNAMIC_CONFIG_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  // bool RedisConnInitSucc = 2;
  if (this->redisconninitsucc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_redisconninitsucc(), target);
  }

  // bool MysqlConnInitSucc = 3;
  if (this->mysqlconninitsucc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_mysqlconninitsucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_INIT_DYNAMIC_CONFIG_RESP)
  return target;
}

size_t DB_INIT_DYNAMIC_CONFIG_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  // bool RedisConnInitSucc = 2;
  if (this->redisconninitsucc() != 0) {
    total_size += 1 + 1;
  }

  // bool MysqlConnInitSucc = 3;
  if (this->mysqlconninitsucc() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_INIT_DYNAMIC_CONFIG_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_INIT_DYNAMIC_CONFIG_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_INIT_DYNAMIC_CONFIG_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_INIT_DYNAMIC_CONFIG_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_INIT_DYNAMIC_CONFIG_RESP)
    MergeFrom(*source);
  }
}

void DB_INIT_DYNAMIC_CONFIG_RESP::MergeFrom(const DB_INIT_DYNAMIC_CONFIG_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommRespData::MergeFrom(from._internal_commdata());
  }
  if (from.redisconninitsucc() != 0) {
    _internal_set_redisconninitsucc(from._internal_redisconninitsucc());
  }
  if (from.mysqlconninitsucc() != 0) {
    _internal_set_mysqlconninitsucc(from._internal_mysqlconninitsucc());
  }
}

void DB_INIT_DYNAMIC_CONFIG_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_INIT_DYNAMIC_CONFIG_RESP::CopyFrom(const DB_INIT_DYNAMIC_CONFIG_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_INIT_DYNAMIC_CONFIG_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_INIT_DYNAMIC_CONFIG_RESP::IsInitialized() const {
  return true;
}

void DB_INIT_DYNAMIC_CONFIG_RESP::InternalSwap(DB_INIT_DYNAMIC_CONFIG_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_INIT_DYNAMIC_CONFIG_RESP, mysqlconninitsucc_)
      + sizeof(DB_INIT_DYNAMIC_CONFIG_RESP::mysqlconninitsucc_)
      - PROTOBUF_FIELD_OFFSET(DB_INIT_DYNAMIC_CONFIG_RESP, commdata_)>(
          reinterpret_cast<char*>(&commdata_),
          reinterpret_cast<char*>(&other->commdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_INIT_DYNAMIC_CONFIG_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_GET_ALL_ROLE_PWD_REQ::InitAsDefaultInstance() {
  ::_DB_GET_ALL_ROLE_PWD_REQ_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommReqData*>(
      ::CommReqData::internal_default_instance());
}
class DB_GET_ALL_ROLE_PWD_REQ::_Internal {
 public:
  static const ::CommReqData& commdata(const DB_GET_ALL_ROLE_PWD_REQ* msg);
};

const ::CommReqData&
DB_GET_ALL_ROLE_PWD_REQ::_Internal::commdata(const DB_GET_ALL_ROLE_PWD_REQ* msg) {
  return *msg->commdata_;
}
DB_GET_ALL_ROLE_PWD_REQ::DB_GET_ALL_ROLE_PWD_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_GET_ALL_ROLE_PWD_REQ)
}
DB_GET_ALL_ROLE_PWD_REQ::DB_GET_ALL_ROLE_PWD_REQ(const DB_GET_ALL_ROLE_PWD_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommReqData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DB_GET_ALL_ROLE_PWD_REQ)
}

void DB_GET_ALL_ROLE_PWD_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto.base);
  commdata_ = nullptr;
}

DB_GET_ALL_ROLE_PWD_REQ::~DB_GET_ALL_ROLE_PWD_REQ() {
  // @@protoc_insertion_point(destructor:DB_GET_ALL_ROLE_PWD_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_GET_ALL_ROLE_PWD_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
}

void DB_GET_ALL_ROLE_PWD_REQ::ArenaDtor(void* object) {
  DB_GET_ALL_ROLE_PWD_REQ* _this = reinterpret_cast< DB_GET_ALL_ROLE_PWD_REQ* >(object);
  (void)_this;
}
void DB_GET_ALL_ROLE_PWD_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_GET_ALL_ROLE_PWD_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_GET_ALL_ROLE_PWD_REQ& DB_GET_ALL_ROLE_PWD_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_GET_ALL_ROLE_PWD_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_GET_ALL_ROLE_PWD_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_GET_ALL_ROLE_PWD_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_GET_ALL_ROLE_PWD_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommReqData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_GET_ALL_ROLE_PWD_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_GET_ALL_ROLE_PWD_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_GET_ALL_ROLE_PWD_REQ)
  return target;
}

size_t DB_GET_ALL_ROLE_PWD_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_GET_ALL_ROLE_PWD_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_GET_ALL_ROLE_PWD_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_GET_ALL_ROLE_PWD_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_GET_ALL_ROLE_PWD_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_GET_ALL_ROLE_PWD_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_GET_ALL_ROLE_PWD_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_GET_ALL_ROLE_PWD_REQ)
    MergeFrom(*source);
  }
}

void DB_GET_ALL_ROLE_PWD_REQ::MergeFrom(const DB_GET_ALL_ROLE_PWD_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_GET_ALL_ROLE_PWD_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommReqData::MergeFrom(from._internal_commdata());
  }
}

void DB_GET_ALL_ROLE_PWD_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_GET_ALL_ROLE_PWD_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GET_ALL_ROLE_PWD_REQ::CopyFrom(const DB_GET_ALL_ROLE_PWD_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_GET_ALL_ROLE_PWD_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GET_ALL_ROLE_PWD_REQ::IsInitialized() const {
  return true;
}

void DB_GET_ALL_ROLE_PWD_REQ::InternalSwap(DB_GET_ALL_ROLE_PWD_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(commdata_, other->commdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_GET_ALL_ROLE_PWD_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_GET_ALL_ROLE_PWD_RESP::InitAsDefaultInstance() {
}
class DB_GET_ALL_ROLE_PWD_RESP::_Internal {
 public:
};

DB_GET_ALL_ROLE_PWD_RESP::DB_GET_ALL_ROLE_PWD_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pwd_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_GET_ALL_ROLE_PWD_RESP)
}
DB_GET_ALL_ROLE_PWD_RESP::DB_GET_ALL_ROLE_PWD_RESP(const DB_GET_ALL_ROLE_PWD_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pwd_(from.pwd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DB_GET_ALL_ROLE_PWD_RESP)
}

void DB_GET_ALL_ROLE_PWD_RESP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto.base);
}

DB_GET_ALL_ROLE_PWD_RESP::~DB_GET_ALL_ROLE_PWD_RESP() {
  // @@protoc_insertion_point(destructor:DB_GET_ALL_ROLE_PWD_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_GET_ALL_ROLE_PWD_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DB_GET_ALL_ROLE_PWD_RESP::ArenaDtor(void* object) {
  DB_GET_ALL_ROLE_PWD_RESP* _this = reinterpret_cast< DB_GET_ALL_ROLE_PWD_RESP* >(object);
  (void)_this;
}
void DB_GET_ALL_ROLE_PWD_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_GET_ALL_ROLE_PWD_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_GET_ALL_ROLE_PWD_RESP& DB_GET_ALL_ROLE_PWD_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_GET_ALL_ROLE_PWD_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_GET_ALL_ROLE_PWD_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_GET_ALL_ROLE_PWD_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pwd_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_GET_ALL_ROLE_PWD_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string Pwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pwd();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DB_GET_ALL_ROLE_PWD_RESP.Pwd"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_GET_ALL_ROLE_PWD_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_GET_ALL_ROLE_PWD_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Pwd = 1;
  for (int i = 0, n = this->_internal_pwd_size(); i < n; i++) {
    const auto& s = this->_internal_pwd(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB_GET_ALL_ROLE_PWD_RESP.Pwd");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_GET_ALL_ROLE_PWD_RESP)
  return target;
}

size_t DB_GET_ALL_ROLE_PWD_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_GET_ALL_ROLE_PWD_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Pwd = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pwd_.size());
  for (int i = 0, n = pwd_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pwd_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_GET_ALL_ROLE_PWD_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_GET_ALL_ROLE_PWD_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_GET_ALL_ROLE_PWD_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_GET_ALL_ROLE_PWD_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_GET_ALL_ROLE_PWD_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_GET_ALL_ROLE_PWD_RESP)
    MergeFrom(*source);
  }
}

void DB_GET_ALL_ROLE_PWD_RESP::MergeFrom(const DB_GET_ALL_ROLE_PWD_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_GET_ALL_ROLE_PWD_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pwd_.MergeFrom(from.pwd_);
}

void DB_GET_ALL_ROLE_PWD_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_GET_ALL_ROLE_PWD_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_GET_ALL_ROLE_PWD_RESP::CopyFrom(const DB_GET_ALL_ROLE_PWD_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_GET_ALL_ROLE_PWD_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_GET_ALL_ROLE_PWD_RESP::IsInitialized() const {
  return true;
}

void DB_GET_ALL_ROLE_PWD_RESP::InternalSwap(DB_GET_ALL_ROLE_PWD_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pwd_.InternalSwap(&other->pwd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_GET_ALL_ROLE_PWD_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_CREATE_ROLE_REQ::InitAsDefaultInstance() {
  ::_DB_CREATE_ROLE_REQ_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommReqData*>(
      ::CommReqData::internal_default_instance());
  ::_DB_CREATE_ROLE_REQ_default_instance_._instance.get_mutable()->roledata_ = const_cast< ::RoleData*>(
      ::RoleData::internal_default_instance());
}
class DB_CREATE_ROLE_REQ::_Internal {
 public:
  static const ::CommReqData& commdata(const DB_CREATE_ROLE_REQ* msg);
  static const ::RoleData& roledata(const DB_CREATE_ROLE_REQ* msg);
};

const ::CommReqData&
DB_CREATE_ROLE_REQ::_Internal::commdata(const DB_CREATE_ROLE_REQ* msg) {
  return *msg->commdata_;
}
const ::RoleData&
DB_CREATE_ROLE_REQ::_Internal::roledata(const DB_CREATE_ROLE_REQ* msg) {
  return *msg->roledata_;
}
DB_CREATE_ROLE_REQ::DB_CREATE_ROLE_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_CREATE_ROLE_REQ)
}
DB_CREATE_ROLE_REQ::DB_CREATE_ROLE_REQ(const DB_CREATE_ROLE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommReqData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  if (from._internal_has_roledata()) {
    roledata_ = new ::RoleData(*from.roledata_);
  } else {
    roledata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DB_CREATE_ROLE_REQ)
}

void DB_CREATE_ROLE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto.base);
  ::memset(&commdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roledata_) -
      reinterpret_cast<char*>(&commdata_)) + sizeof(roledata_));
}

DB_CREATE_ROLE_REQ::~DB_CREATE_ROLE_REQ() {
  // @@protoc_insertion_point(destructor:DB_CREATE_ROLE_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_CREATE_ROLE_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
  if (this != internal_default_instance()) delete roledata_;
}

void DB_CREATE_ROLE_REQ::ArenaDtor(void* object) {
  DB_CREATE_ROLE_REQ* _this = reinterpret_cast< DB_CREATE_ROLE_REQ* >(object);
  (void)_this;
}
void DB_CREATE_ROLE_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_CREATE_ROLE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_CREATE_ROLE_REQ& DB_CREATE_ROLE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_CREATE_ROLE_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_CREATE_ROLE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_CREATE_ROLE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  if (GetArena() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_CREATE_ROLE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommReqData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoleData RoleData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_CREATE_ROLE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CREATE_ROLE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  // .RoleData RoleData = 2;
  if (this->has_roledata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roledata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CREATE_ROLE_REQ)
  return target;
}

size_t DB_CREATE_ROLE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_CREATE_ROLE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  // .RoleData RoleData = 2;
  if (this->has_roledata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roledata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_CREATE_ROLE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_CREATE_ROLE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_CREATE_ROLE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_CREATE_ROLE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_CREATE_ROLE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_CREATE_ROLE_REQ)
    MergeFrom(*source);
  }
}

void DB_CREATE_ROLE_REQ::MergeFrom(const DB_CREATE_ROLE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_CREATE_ROLE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommReqData::MergeFrom(from._internal_commdata());
  }
  if (from.has_roledata()) {
    _internal_mutable_roledata()->::RoleData::MergeFrom(from._internal_roledata());
  }
}

void DB_CREATE_ROLE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_CREATE_ROLE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CREATE_ROLE_REQ::CopyFrom(const DB_CREATE_ROLE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_CREATE_ROLE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CREATE_ROLE_REQ::IsInitialized() const {
  return true;
}

void DB_CREATE_ROLE_REQ::InternalSwap(DB_CREATE_ROLE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_CREATE_ROLE_REQ, roledata_)
      + sizeof(DB_CREATE_ROLE_REQ::roledata_)
      - PROTOBUF_FIELD_OFFSET(DB_CREATE_ROLE_REQ, commdata_)>(
          reinterpret_cast<char*>(&commdata_),
          reinterpret_cast<char*>(&other->commdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_CREATE_ROLE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_CREATE_ROLE_RESP::InitAsDefaultInstance() {
  ::_DB_CREATE_ROLE_RESP_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommRespData*>(
      ::CommRespData::internal_default_instance());
}
class DB_CREATE_ROLE_RESP::_Internal {
 public:
  static const ::CommRespData& commdata(const DB_CREATE_ROLE_RESP* msg);
};

const ::CommRespData&
DB_CREATE_ROLE_RESP::_Internal::commdata(const DB_CREATE_ROLE_RESP* msg) {
  return *msg->commdata_;
}
DB_CREATE_ROLE_RESP::DB_CREATE_ROLE_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_CREATE_ROLE_RESP)
}
DB_CREATE_ROLE_RESP::DB_CREATE_ROLE_RESP(const DB_CREATE_ROLE_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommRespData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DB_CREATE_ROLE_RESP)
}

void DB_CREATE_ROLE_RESP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto.base);
  commdata_ = nullptr;
}

DB_CREATE_ROLE_RESP::~DB_CREATE_ROLE_RESP() {
  // @@protoc_insertion_point(destructor:DB_CREATE_ROLE_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_CREATE_ROLE_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
}

void DB_CREATE_ROLE_RESP::ArenaDtor(void* object) {
  DB_CREATE_ROLE_RESP* _this = reinterpret_cast< DB_CREATE_ROLE_RESP* >(object);
  (void)_this;
}
void DB_CREATE_ROLE_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_CREATE_ROLE_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_CREATE_ROLE_RESP& DB_CREATE_ROLE_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_CREATE_ROLE_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_CREATE_ROLE_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_CREATE_ROLE_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_CREATE_ROLE_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommRespData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_CREATE_ROLE_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_CREATE_ROLE_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_CREATE_ROLE_RESP)
  return target;
}

size_t DB_CREATE_ROLE_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_CREATE_ROLE_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_CREATE_ROLE_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_CREATE_ROLE_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_CREATE_ROLE_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_CREATE_ROLE_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_CREATE_ROLE_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_CREATE_ROLE_RESP)
    MergeFrom(*source);
  }
}

void DB_CREATE_ROLE_RESP::MergeFrom(const DB_CREATE_ROLE_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_CREATE_ROLE_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommRespData::MergeFrom(from._internal_commdata());
  }
}

void DB_CREATE_ROLE_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_CREATE_ROLE_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CREATE_ROLE_RESP::CopyFrom(const DB_CREATE_ROLE_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_CREATE_ROLE_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CREATE_ROLE_RESP::IsInitialized() const {
  return true;
}

void DB_CREATE_ROLE_RESP::InternalSwap(DB_CREATE_ROLE_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(commdata_, other->commdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_CREATE_ROLE_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_LOAD_ROLE_DATA_REQ::InitAsDefaultInstance() {
  ::_DB_LOAD_ROLE_DATA_REQ_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommReqData*>(
      ::CommReqData::internal_default_instance());
}
class DB_LOAD_ROLE_DATA_REQ::_Internal {
 public:
  static const ::CommReqData& commdata(const DB_LOAD_ROLE_DATA_REQ* msg);
};

const ::CommReqData&
DB_LOAD_ROLE_DATA_REQ::_Internal::commdata(const DB_LOAD_ROLE_DATA_REQ* msg) {
  return *msg->commdata_;
}
DB_LOAD_ROLE_DATA_REQ::DB_LOAD_ROLE_DATA_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_LOAD_ROLE_DATA_REQ)
}
DB_LOAD_ROLE_DATA_REQ::DB_LOAD_ROLE_DATA_REQ(const DB_LOAD_ROLE_DATA_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommReqData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:DB_LOAD_ROLE_DATA_REQ)
}

void DB_LOAD_ROLE_DATA_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto.base);
  ::memset(&commdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&commdata_)) + sizeof(roleid_));
}

DB_LOAD_ROLE_DATA_REQ::~DB_LOAD_ROLE_DATA_REQ() {
  // @@protoc_insertion_point(destructor:DB_LOAD_ROLE_DATA_REQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_LOAD_ROLE_DATA_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
}

void DB_LOAD_ROLE_DATA_REQ::ArenaDtor(void* object) {
  DB_LOAD_ROLE_DATA_REQ* _this = reinterpret_cast< DB_LOAD_ROLE_DATA_REQ* >(object);
  (void)_this;
}
void DB_LOAD_ROLE_DATA_REQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_LOAD_ROLE_DATA_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_LOAD_ROLE_DATA_REQ& DB_LOAD_ROLE_DATA_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_LOAD_ROLE_DATA_REQ_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_LOAD_ROLE_DATA_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_LOAD_ROLE_DATA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  roleid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_LOAD_ROLE_DATA_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommReqData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RoleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_LOAD_ROLE_DATA_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_LOAD_ROLE_DATA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  // int32 RoleId = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_LOAD_ROLE_DATA_REQ)
  return target;
}

size_t DB_LOAD_ROLE_DATA_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_LOAD_ROLE_DATA_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommReqData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  // int32 RoleId = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_LOAD_ROLE_DATA_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_LOAD_ROLE_DATA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_LOAD_ROLE_DATA_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_LOAD_ROLE_DATA_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_LOAD_ROLE_DATA_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_LOAD_ROLE_DATA_REQ)
    MergeFrom(*source);
  }
}

void DB_LOAD_ROLE_DATA_REQ::MergeFrom(const DB_LOAD_ROLE_DATA_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_LOAD_ROLE_DATA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommReqData::MergeFrom(from._internal_commdata());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void DB_LOAD_ROLE_DATA_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_LOAD_ROLE_DATA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LOAD_ROLE_DATA_REQ::CopyFrom(const DB_LOAD_ROLE_DATA_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_LOAD_ROLE_DATA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LOAD_ROLE_DATA_REQ::IsInitialized() const {
  return true;
}

void DB_LOAD_ROLE_DATA_REQ::InternalSwap(DB_LOAD_ROLE_DATA_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_LOAD_ROLE_DATA_REQ, roleid_)
      + sizeof(DB_LOAD_ROLE_DATA_REQ::roleid_)
      - PROTOBUF_FIELD_OFFSET(DB_LOAD_ROLE_DATA_REQ, commdata_)>(
          reinterpret_cast<char*>(&commdata_),
          reinterpret_cast<char*>(&other->commdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_LOAD_ROLE_DATA_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DB_LOAD_ROLE_DATA_RESP::InitAsDefaultInstance() {
  ::_DB_LOAD_ROLE_DATA_RESP_default_instance_._instance.get_mutable()->commdata_ = const_cast< ::CommRespData*>(
      ::CommRespData::internal_default_instance());
  ::_DB_LOAD_ROLE_DATA_RESP_default_instance_._instance.get_mutable()->roledata_ = const_cast< ::RoleData*>(
      ::RoleData::internal_default_instance());
}
class DB_LOAD_ROLE_DATA_RESP::_Internal {
 public:
  static const ::CommRespData& commdata(const DB_LOAD_ROLE_DATA_RESP* msg);
  static const ::RoleData& roledata(const DB_LOAD_ROLE_DATA_RESP* msg);
};

const ::CommRespData&
DB_LOAD_ROLE_DATA_RESP::_Internal::commdata(const DB_LOAD_ROLE_DATA_RESP* msg) {
  return *msg->commdata_;
}
const ::RoleData&
DB_LOAD_ROLE_DATA_RESP::_Internal::roledata(const DB_LOAD_ROLE_DATA_RESP* msg) {
  return *msg->roledata_;
}
DB_LOAD_ROLE_DATA_RESP::DB_LOAD_ROLE_DATA_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DB_LOAD_ROLE_DATA_RESP)
}
DB_LOAD_ROLE_DATA_RESP::DB_LOAD_ROLE_DATA_RESP(const DB_LOAD_ROLE_DATA_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commdata()) {
    commdata_ = new ::CommRespData(*from.commdata_);
  } else {
    commdata_ = nullptr;
  }
  if (from._internal_has_roledata()) {
    roledata_ = new ::RoleData(*from.roledata_);
  } else {
    roledata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DB_LOAD_ROLE_DATA_RESP)
}

void DB_LOAD_ROLE_DATA_RESP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto.base);
  ::memset(&commdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roledata_) -
      reinterpret_cast<char*>(&commdata_)) + sizeof(roledata_));
}

DB_LOAD_ROLE_DATA_RESP::~DB_LOAD_ROLE_DATA_RESP() {
  // @@protoc_insertion_point(destructor:DB_LOAD_ROLE_DATA_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DB_LOAD_ROLE_DATA_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commdata_;
  if (this != internal_default_instance()) delete roledata_;
}

void DB_LOAD_ROLE_DATA_RESP::ArenaDtor(void* object) {
  DB_LOAD_ROLE_DATA_RESP* _this = reinterpret_cast< DB_LOAD_ROLE_DATA_RESP* >(object);
  (void)_this;
}
void DB_LOAD_ROLE_DATA_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DB_LOAD_ROLE_DATA_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DB_LOAD_ROLE_DATA_RESP& DB_LOAD_ROLE_DATA_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DB_LOAD_ROLE_DATA_RESP_dbservice_2eproto.base);
  return *internal_default_instance();
}


void DB_LOAD_ROLE_DATA_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:DB_LOAD_ROLE_DATA_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
  if (GetArena() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DB_LOAD_ROLE_DATA_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CommRespData CommData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoleData RoleData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DB_LOAD_ROLE_DATA_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB_LOAD_ROLE_DATA_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commdata(this), target, stream);
  }

  // .RoleData RoleData = 2;
  if (this->has_roledata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roledata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB_LOAD_ROLE_DATA_RESP)
  return target;
}

size_t DB_LOAD_ROLE_DATA_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB_LOAD_ROLE_DATA_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommRespData CommData = 1;
  if (this->has_commdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commdata_);
  }

  // .RoleData RoleData = 2;
  if (this->has_roledata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roledata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DB_LOAD_ROLE_DATA_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DB_LOAD_ROLE_DATA_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const DB_LOAD_ROLE_DATA_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DB_LOAD_ROLE_DATA_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DB_LOAD_ROLE_DATA_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DB_LOAD_ROLE_DATA_RESP)
    MergeFrom(*source);
  }
}

void DB_LOAD_ROLE_DATA_RESP::MergeFrom(const DB_LOAD_ROLE_DATA_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DB_LOAD_ROLE_DATA_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commdata()) {
    _internal_mutable_commdata()->::CommRespData::MergeFrom(from._internal_commdata());
  }
  if (from.has_roledata()) {
    _internal_mutable_roledata()->::RoleData::MergeFrom(from._internal_roledata());
  }
}

void DB_LOAD_ROLE_DATA_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DB_LOAD_ROLE_DATA_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LOAD_ROLE_DATA_RESP::CopyFrom(const DB_LOAD_ROLE_DATA_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB_LOAD_ROLE_DATA_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LOAD_ROLE_DATA_RESP::IsInitialized() const {
  return true;
}

void DB_LOAD_ROLE_DATA_RESP::InternalSwap(DB_LOAD_ROLE_DATA_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DB_LOAD_ROLE_DATA_RESP, roledata_)
      + sizeof(DB_LOAD_ROLE_DATA_RESP::roledata_)
      - PROTOBUF_FIELD_OFFSET(DB_LOAD_ROLE_DATA_RESP, commdata_)>(
          reinterpret_cast<char*>(&commdata_),
          reinterpret_cast<char*>(&other->commdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DB_LOAD_ROLE_DATA_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DB_PING_REQ* Arena::CreateMaybeMessage< ::DB_PING_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_PING_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_PING_RESP* Arena::CreateMaybeMessage< ::DB_PING_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_PING_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_HEART_BEAT_REQ* Arena::CreateMaybeMessage< ::DB_HEART_BEAT_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_HEART_BEAT_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_HEART_BEAT_RESP* Arena::CreateMaybeMessage< ::DB_HEART_BEAT_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_HEART_BEAT_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::CommReqData* Arena::CreateMaybeMessage< ::CommReqData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommReqData >(arena);
}
template<> PROTOBUF_NOINLINE ::CommRespData* Arena::CreateMaybeMessage< ::CommRespData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommRespData >(arena);
}
template<> PROTOBUF_NOINLINE ::RedisConfig* Arena::CreateMaybeMessage< ::RedisConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedisConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MysqlConfig* Arena::CreateMaybeMessage< ::MysqlConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MysqlConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::RoleData* Arena::CreateMaybeMessage< ::RoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_INIT_DYNAIMC_CONFIG_REQ* Arena::CreateMaybeMessage< ::DB_INIT_DYNAIMC_CONFIG_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_INIT_DYNAIMC_CONFIG_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_INIT_DYNAMIC_CONFIG_RESP* Arena::CreateMaybeMessage< ::DB_INIT_DYNAMIC_CONFIG_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_INIT_DYNAMIC_CONFIG_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_GET_ALL_ROLE_PWD_REQ* Arena::CreateMaybeMessage< ::DB_GET_ALL_ROLE_PWD_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_GET_ALL_ROLE_PWD_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_GET_ALL_ROLE_PWD_RESP* Arena::CreateMaybeMessage< ::DB_GET_ALL_ROLE_PWD_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_GET_ALL_ROLE_PWD_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_CREATE_ROLE_REQ* Arena::CreateMaybeMessage< ::DB_CREATE_ROLE_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_CREATE_ROLE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_CREATE_ROLE_RESP* Arena::CreateMaybeMessage< ::DB_CREATE_ROLE_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_CREATE_ROLE_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_LOAD_ROLE_DATA_REQ* Arena::CreateMaybeMessage< ::DB_LOAD_ROLE_DATA_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_LOAD_ROLE_DATA_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DB_LOAD_ROLE_DATA_RESP* Arena::CreateMaybeMessage< ::DB_LOAD_ROLE_DATA_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB_LOAD_ROLE_DATA_RESP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
