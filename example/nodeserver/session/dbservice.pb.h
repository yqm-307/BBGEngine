// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dbservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dbservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dbservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dbservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbservice_2eproto;
class CommReqData;
class CommReqDataDefaultTypeInternal;
extern CommReqDataDefaultTypeInternal _CommReqData_default_instance_;
class CommRespData;
class CommRespDataDefaultTypeInternal;
extern CommRespDataDefaultTypeInternal _CommRespData_default_instance_;
class DB_CREATE_ROLE_REQ;
class DB_CREATE_ROLE_REQDefaultTypeInternal;
extern DB_CREATE_ROLE_REQDefaultTypeInternal _DB_CREATE_ROLE_REQ_default_instance_;
class DB_CREATE_ROLE_RESP;
class DB_CREATE_ROLE_RESPDefaultTypeInternal;
extern DB_CREATE_ROLE_RESPDefaultTypeInternal _DB_CREATE_ROLE_RESP_default_instance_;
class DB_GET_ALL_ROLE_PWD_REQ;
class DB_GET_ALL_ROLE_PWD_REQDefaultTypeInternal;
extern DB_GET_ALL_ROLE_PWD_REQDefaultTypeInternal _DB_GET_ALL_ROLE_PWD_REQ_default_instance_;
class DB_GET_ALL_ROLE_PWD_RESP;
class DB_GET_ALL_ROLE_PWD_RESPDefaultTypeInternal;
extern DB_GET_ALL_ROLE_PWD_RESPDefaultTypeInternal _DB_GET_ALL_ROLE_PWD_RESP_default_instance_;
class DB_HEART_BEAT_REQ;
class DB_HEART_BEAT_REQDefaultTypeInternal;
extern DB_HEART_BEAT_REQDefaultTypeInternal _DB_HEART_BEAT_REQ_default_instance_;
class DB_HEART_BEAT_RESP;
class DB_HEART_BEAT_RESPDefaultTypeInternal;
extern DB_HEART_BEAT_RESPDefaultTypeInternal _DB_HEART_BEAT_RESP_default_instance_;
class DB_INIT_DYNAIMC_CONFIG_REQ;
class DB_INIT_DYNAIMC_CONFIG_REQDefaultTypeInternal;
extern DB_INIT_DYNAIMC_CONFIG_REQDefaultTypeInternal _DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_;
class DB_INIT_DYNAMIC_CONFIG_RESP;
class DB_INIT_DYNAMIC_CONFIG_RESPDefaultTypeInternal;
extern DB_INIT_DYNAMIC_CONFIG_RESPDefaultTypeInternal _DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_;
class DB_LOAD_ROLE_DATA_REQ;
class DB_LOAD_ROLE_DATA_REQDefaultTypeInternal;
extern DB_LOAD_ROLE_DATA_REQDefaultTypeInternal _DB_LOAD_ROLE_DATA_REQ_default_instance_;
class DB_LOAD_ROLE_DATA_RESP;
class DB_LOAD_ROLE_DATA_RESPDefaultTypeInternal;
extern DB_LOAD_ROLE_DATA_RESPDefaultTypeInternal _DB_LOAD_ROLE_DATA_RESP_default_instance_;
class DB_PING_REQ;
class DB_PING_REQDefaultTypeInternal;
extern DB_PING_REQDefaultTypeInternal _DB_PING_REQ_default_instance_;
class DB_PING_RESP;
class DB_PING_RESPDefaultTypeInternal;
extern DB_PING_RESPDefaultTypeInternal _DB_PING_RESP_default_instance_;
class MysqlConfig;
class MysqlConfigDefaultTypeInternal;
extern MysqlConfigDefaultTypeInternal _MysqlConfig_default_instance_;
class RedisConfig;
class RedisConfigDefaultTypeInternal;
extern RedisConfigDefaultTypeInternal _RedisConfig_default_instance_;
class RoleData;
class RoleDataDefaultTypeInternal;
extern RoleDataDefaultTypeInternal _RoleData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CommReqData* Arena::CreateMaybeMessage<::CommReqData>(Arena*);
template<> ::CommRespData* Arena::CreateMaybeMessage<::CommRespData>(Arena*);
template<> ::DB_CREATE_ROLE_REQ* Arena::CreateMaybeMessage<::DB_CREATE_ROLE_REQ>(Arena*);
template<> ::DB_CREATE_ROLE_RESP* Arena::CreateMaybeMessage<::DB_CREATE_ROLE_RESP>(Arena*);
template<> ::DB_GET_ALL_ROLE_PWD_REQ* Arena::CreateMaybeMessage<::DB_GET_ALL_ROLE_PWD_REQ>(Arena*);
template<> ::DB_GET_ALL_ROLE_PWD_RESP* Arena::CreateMaybeMessage<::DB_GET_ALL_ROLE_PWD_RESP>(Arena*);
template<> ::DB_HEART_BEAT_REQ* Arena::CreateMaybeMessage<::DB_HEART_BEAT_REQ>(Arena*);
template<> ::DB_HEART_BEAT_RESP* Arena::CreateMaybeMessage<::DB_HEART_BEAT_RESP>(Arena*);
template<> ::DB_INIT_DYNAIMC_CONFIG_REQ* Arena::CreateMaybeMessage<::DB_INIT_DYNAIMC_CONFIG_REQ>(Arena*);
template<> ::DB_INIT_DYNAMIC_CONFIG_RESP* Arena::CreateMaybeMessage<::DB_INIT_DYNAMIC_CONFIG_RESP>(Arena*);
template<> ::DB_LOAD_ROLE_DATA_REQ* Arena::CreateMaybeMessage<::DB_LOAD_ROLE_DATA_REQ>(Arena*);
template<> ::DB_LOAD_ROLE_DATA_RESP* Arena::CreateMaybeMessage<::DB_LOAD_ROLE_DATA_RESP>(Arena*);
template<> ::DB_PING_REQ* Arena::CreateMaybeMessage<::DB_PING_REQ>(Arena*);
template<> ::DB_PING_RESP* Arena::CreateMaybeMessage<::DB_PING_RESP>(Arena*);
template<> ::MysqlConfig* Arena::CreateMaybeMessage<::MysqlConfig>(Arena*);
template<> ::RedisConfig* Arena::CreateMaybeMessage<::RedisConfig>(Arena*);
template<> ::RoleData* Arena::CreateMaybeMessage<::RoleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DB_PING_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_PING_REQ) */ {
 public:
  DB_PING_REQ();
  virtual ~DB_PING_REQ();

  DB_PING_REQ(const DB_PING_REQ& from);
  DB_PING_REQ(DB_PING_REQ&& from) noexcept
    : DB_PING_REQ() {
    *this = ::std::move(from);
  }

  inline DB_PING_REQ& operator=(const DB_PING_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_PING_REQ& operator=(DB_PING_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_PING_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_PING_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_PING_REQ*>(
               &_DB_PING_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DB_PING_REQ& a, DB_PING_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_PING_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_PING_REQ* New() const final {
    return CreateMaybeMessage<DB_PING_REQ>(nullptr);
  }

  DB_PING_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_PING_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_PING_REQ& from);
  void MergeFrom(const DB_PING_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_PING_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_PING_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DB_PING_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_PING_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_PING_RESP) */ {
 public:
  DB_PING_RESP();
  virtual ~DB_PING_RESP();

  DB_PING_RESP(const DB_PING_RESP& from);
  DB_PING_RESP(DB_PING_RESP&& from) noexcept
    : DB_PING_RESP() {
    *this = ::std::move(from);
  }

  inline DB_PING_RESP& operator=(const DB_PING_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_PING_RESP& operator=(DB_PING_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_PING_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_PING_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_PING_RESP*>(
               &_DB_PING_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DB_PING_RESP& a, DB_PING_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_PING_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_PING_RESP* New() const final {
    return CreateMaybeMessage<DB_PING_RESP>(nullptr);
  }

  DB_PING_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_PING_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_PING_RESP& from);
  void MergeFrom(const DB_PING_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_PING_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_PING_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
  };
  // int64 TimeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DB_PING_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_HEART_BEAT_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_HEART_BEAT_REQ) */ {
 public:
  DB_HEART_BEAT_REQ();
  virtual ~DB_HEART_BEAT_REQ();

  DB_HEART_BEAT_REQ(const DB_HEART_BEAT_REQ& from);
  DB_HEART_BEAT_REQ(DB_HEART_BEAT_REQ&& from) noexcept
    : DB_HEART_BEAT_REQ() {
    *this = ::std::move(from);
  }

  inline DB_HEART_BEAT_REQ& operator=(const DB_HEART_BEAT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_HEART_BEAT_REQ& operator=(DB_HEART_BEAT_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_HEART_BEAT_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_HEART_BEAT_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_HEART_BEAT_REQ*>(
               &_DB_HEART_BEAT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DB_HEART_BEAT_REQ& a, DB_HEART_BEAT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_HEART_BEAT_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_HEART_BEAT_REQ* New() const final {
    return CreateMaybeMessage<DB_HEART_BEAT_REQ>(nullptr);
  }

  DB_HEART_BEAT_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_HEART_BEAT_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_HEART_BEAT_REQ& from);
  void MergeFrom(const DB_HEART_BEAT_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_HEART_BEAT_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_HEART_BEAT_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DB_HEART_BEAT_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_HEART_BEAT_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_HEART_BEAT_RESP) */ {
 public:
  DB_HEART_BEAT_RESP();
  virtual ~DB_HEART_BEAT_RESP();

  DB_HEART_BEAT_RESP(const DB_HEART_BEAT_RESP& from);
  DB_HEART_BEAT_RESP(DB_HEART_BEAT_RESP&& from) noexcept
    : DB_HEART_BEAT_RESP() {
    *this = ::std::move(from);
  }

  inline DB_HEART_BEAT_RESP& operator=(const DB_HEART_BEAT_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_HEART_BEAT_RESP& operator=(DB_HEART_BEAT_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_HEART_BEAT_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_HEART_BEAT_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_HEART_BEAT_RESP*>(
               &_DB_HEART_BEAT_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DB_HEART_BEAT_RESP& a, DB_HEART_BEAT_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_HEART_BEAT_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_HEART_BEAT_RESP* New() const final {
    return CreateMaybeMessage<DB_HEART_BEAT_RESP>(nullptr);
  }

  DB_HEART_BEAT_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_HEART_BEAT_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_HEART_BEAT_RESP& from);
  void MergeFrom(const DB_HEART_BEAT_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_HEART_BEAT_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_HEART_BEAT_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DB_HEART_BEAT_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class CommReqData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommReqData) */ {
 public:
  CommReqData();
  virtual ~CommReqData();

  CommReqData(const CommReqData& from);
  CommReqData(CommReqData&& from) noexcept
    : CommReqData() {
    *this = ::std::move(from);
  }

  inline CommReqData& operator=(const CommReqData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommReqData& operator=(CommReqData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommReqData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommReqData* internal_default_instance() {
    return reinterpret_cast<const CommReqData*>(
               &_CommReqData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommReqData& a, CommReqData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommReqData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommReqData* New() const final {
    return CreateMaybeMessage<CommReqData>(nullptr);
  }

  CommReqData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommReqData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommReqData& from);
  void MergeFrom(const CommReqData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommReqData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommReqData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int32 ServerId = 1;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommReqData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class CommRespData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommRespData) */ {
 public:
  CommRespData();
  virtual ~CommRespData();

  CommRespData(const CommRespData& from);
  CommRespData(CommRespData&& from) noexcept
    : CommRespData() {
    *this = ::std::move(from);
  }

  inline CommRespData& operator=(const CommRespData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommRespData& operator=(CommRespData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommRespData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommRespData* internal_default_instance() {
    return reinterpret_cast<const CommRespData*>(
               &_CommRespData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommRespData& a, CommRespData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommRespData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommRespData* New() const final {
    return CreateMaybeMessage<CommRespData>(nullptr);
  }

  CommRespData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommRespData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommRespData& from);
  void MergeFrom(const CommRespData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommRespData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommRespData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string Msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CommRespData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class RedisConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedisConfig) */ {
 public:
  RedisConfig();
  virtual ~RedisConfig();

  RedisConfig(const RedisConfig& from);
  RedisConfig(RedisConfig&& from) noexcept
    : RedisConfig() {
    *this = ::std::move(from);
  }

  inline RedisConfig& operator=(const RedisConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedisConfig& operator=(RedisConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedisConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisConfig* internal_default_instance() {
    return reinterpret_cast<const RedisConfig*>(
               &_RedisConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RedisConfig& a, RedisConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RedisConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedisConfig* New() const final {
    return CreateMaybeMessage<RedisConfig>(nullptr);
  }

  RedisConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedisConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedisConfig& from);
  void MergeFrom(const RedisConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedisConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedisIPFieldNumber = 1,
    kRedisPortFieldNumber = 2,
  };
  // string RedisIP = 1;
  void clear_redisip();
  const std::string& redisip() const;
  void set_redisip(const std::string& value);
  void set_redisip(std::string&& value);
  void set_redisip(const char* value);
  void set_redisip(const char* value, size_t size);
  std::string* mutable_redisip();
  std::string* release_redisip();
  void set_allocated_redisip(std::string* redisip);
  private:
  const std::string& _internal_redisip() const;
  void _internal_set_redisip(const std::string& value);
  std::string* _internal_mutable_redisip();
  public:

  // int32 RedisPort = 2;
  void clear_redisport();
  ::PROTOBUF_NAMESPACE_ID::int32 redisport() const;
  void set_redisport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_redisport() const;
  void _internal_set_redisport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RedisConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redisip_;
  ::PROTOBUF_NAMESPACE_ID::int32 redisport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class MysqlConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MysqlConfig) */ {
 public:
  MysqlConfig();
  virtual ~MysqlConfig();

  MysqlConfig(const MysqlConfig& from);
  MysqlConfig(MysqlConfig&& from) noexcept
    : MysqlConfig() {
    *this = ::std::move(from);
  }

  inline MysqlConfig& operator=(const MysqlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlConfig& operator=(MysqlConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MysqlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlConfig* internal_default_instance() {
    return reinterpret_cast<const MysqlConfig*>(
               &_MysqlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MysqlConfig& a, MysqlConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MysqlConfig* New() const final {
    return CreateMaybeMessage<MysqlConfig>(nullptr);
  }

  MysqlConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MysqlConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MysqlConfig& from);
  void MergeFrom(const MysqlConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MysqlConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIPFieldNumber = 1,
    kUsernameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kDBNameFieldNumber = 5,
    kPortFieldNumber = 2,
  };
  // string IP = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string Username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string DBName = 5;
  void clear_dbname();
  const std::string& dbname() const;
  void set_dbname(const std::string& value);
  void set_dbname(std::string&& value);
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  std::string* mutable_dbname();
  std::string* release_dbname();
  void set_allocated_dbname(std::string* dbname);
  private:
  const std::string& _internal_dbname() const;
  void _internal_set_dbname(const std::string& value);
  std::string* _internal_mutable_dbname();
  public:

  // int32 Port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MysqlConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbname_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class RoleData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleData) */ {
 public:
  RoleData();
  virtual ~RoleData();

  RoleData(const RoleData& from);
  RoleData(RoleData&& from) noexcept
    : RoleData() {
    *this = ::std::move(from);
  }

  inline RoleData& operator=(const RoleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleData& operator=(RoleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleData* internal_default_instance() {
    return reinterpret_cast<const RoleData*>(
               &_RoleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoleData& a, RoleData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleData* New() const final {
    return CreateMaybeMessage<RoleData>(nullptr);
  }

  RoleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleData& from);
  void MergeFrom(const RoleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kAccountFieldNumber = 3,
    kEquipBaseDataFieldNumber = 4,
    kEquipExtDataFieldNumber = 5,
    kItemDataFieldNumber = 6,
    kPetDataFieldNumber = 7,
  };
  // string RoleName = 2;
  void clear_rolename();
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // string Account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string EquipBaseData = 4;
  void clear_equipbasedata();
  const std::string& equipbasedata() const;
  void set_equipbasedata(const std::string& value);
  void set_equipbasedata(std::string&& value);
  void set_equipbasedata(const char* value);
  void set_equipbasedata(const char* value, size_t size);
  std::string* mutable_equipbasedata();
  std::string* release_equipbasedata();
  void set_allocated_equipbasedata(std::string* equipbasedata);
  private:
  const std::string& _internal_equipbasedata() const;
  void _internal_set_equipbasedata(const std::string& value);
  std::string* _internal_mutable_equipbasedata();
  public:

  // string EquipExtData = 5;
  void clear_equipextdata();
  const std::string& equipextdata() const;
  void set_equipextdata(const std::string& value);
  void set_equipextdata(std::string&& value);
  void set_equipextdata(const char* value);
  void set_equipextdata(const char* value, size_t size);
  std::string* mutable_equipextdata();
  std::string* release_equipextdata();
  void set_allocated_equipextdata(std::string* equipextdata);
  private:
  const std::string& _internal_equipextdata() const;
  void _internal_set_equipextdata(const std::string& value);
  std::string* _internal_mutable_equipextdata();
  public:

  // string ItemData = 6;
  void clear_itemdata();
  const std::string& itemdata() const;
  void set_itemdata(const std::string& value);
  void set_itemdata(std::string&& value);
  void set_itemdata(const char* value);
  void set_itemdata(const char* value, size_t size);
  std::string* mutable_itemdata();
  std::string* release_itemdata();
  void set_allocated_itemdata(std::string* itemdata);
  private:
  const std::string& _internal_itemdata() const;
  void _internal_set_itemdata(const std::string& value);
  std::string* _internal_mutable_itemdata();
  public:

  // string PetData = 7;
  void clear_petdata();
  const std::string& petdata() const;
  void set_petdata(const std::string& value);
  void set_petdata(std::string&& value);
  void set_petdata(const char* value);
  void set_petdata(const char* value, size_t size);
  std::string* mutable_petdata();
  std::string* release_petdata();
  void set_allocated_petdata(std::string* petdata);
  private:
  const std::string& _internal_petdata() const;
  void _internal_set_petdata(const std::string& value);
  std::string* _internal_mutable_petdata();
  public:

  // @@protoc_insertion_point(class_scope:RoleData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipbasedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipextdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr petdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_INIT_DYNAIMC_CONFIG_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_INIT_DYNAIMC_CONFIG_REQ) */ {
 public:
  DB_INIT_DYNAIMC_CONFIG_REQ();
  virtual ~DB_INIT_DYNAIMC_CONFIG_REQ();

  DB_INIT_DYNAIMC_CONFIG_REQ(const DB_INIT_DYNAIMC_CONFIG_REQ& from);
  DB_INIT_DYNAIMC_CONFIG_REQ(DB_INIT_DYNAIMC_CONFIG_REQ&& from) noexcept
    : DB_INIT_DYNAIMC_CONFIG_REQ() {
    *this = ::std::move(from);
  }

  inline DB_INIT_DYNAIMC_CONFIG_REQ& operator=(const DB_INIT_DYNAIMC_CONFIG_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_INIT_DYNAIMC_CONFIG_REQ& operator=(DB_INIT_DYNAIMC_CONFIG_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_INIT_DYNAIMC_CONFIG_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_INIT_DYNAIMC_CONFIG_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_INIT_DYNAIMC_CONFIG_REQ*>(
               &_DB_INIT_DYNAIMC_CONFIG_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DB_INIT_DYNAIMC_CONFIG_REQ& a, DB_INIT_DYNAIMC_CONFIG_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_INIT_DYNAIMC_CONFIG_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_INIT_DYNAIMC_CONFIG_REQ* New() const final {
    return CreateMaybeMessage<DB_INIT_DYNAIMC_CONFIG_REQ>(nullptr);
  }

  DB_INIT_DYNAIMC_CONFIG_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_INIT_DYNAIMC_CONFIG_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_INIT_DYNAIMC_CONFIG_REQ& from);
  void MergeFrom(const DB_INIT_DYNAIMC_CONFIG_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_INIT_DYNAIMC_CONFIG_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_INIT_DYNAIMC_CONFIG_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedisCfgFieldNumber = 1,
    kMysqlCfgFieldNumber = 2,
  };
  // .RedisConfig RedisCfg = 1;
  bool has_rediscfg() const;
  private:
  bool _internal_has_rediscfg() const;
  public:
  void clear_rediscfg();
  const ::RedisConfig& rediscfg() const;
  ::RedisConfig* release_rediscfg();
  ::RedisConfig* mutable_rediscfg();
  void set_allocated_rediscfg(::RedisConfig* rediscfg);
  private:
  const ::RedisConfig& _internal_rediscfg() const;
  ::RedisConfig* _internal_mutable_rediscfg();
  public:

  // .MysqlConfig MysqlCfg = 2;
  bool has_mysqlcfg() const;
  private:
  bool _internal_has_mysqlcfg() const;
  public:
  void clear_mysqlcfg();
  const ::MysqlConfig& mysqlcfg() const;
  ::MysqlConfig* release_mysqlcfg();
  ::MysqlConfig* mutable_mysqlcfg();
  void set_allocated_mysqlcfg(::MysqlConfig* mysqlcfg);
  private:
  const ::MysqlConfig& _internal_mysqlcfg() const;
  ::MysqlConfig* _internal_mutable_mysqlcfg();
  public:

  // @@protoc_insertion_point(class_scope:DB_INIT_DYNAIMC_CONFIG_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::RedisConfig* rediscfg_;
  ::MysqlConfig* mysqlcfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_INIT_DYNAMIC_CONFIG_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_INIT_DYNAMIC_CONFIG_RESP) */ {
 public:
  DB_INIT_DYNAMIC_CONFIG_RESP();
  virtual ~DB_INIT_DYNAMIC_CONFIG_RESP();

  DB_INIT_DYNAMIC_CONFIG_RESP(const DB_INIT_DYNAMIC_CONFIG_RESP& from);
  DB_INIT_DYNAMIC_CONFIG_RESP(DB_INIT_DYNAMIC_CONFIG_RESP&& from) noexcept
    : DB_INIT_DYNAMIC_CONFIG_RESP() {
    *this = ::std::move(from);
  }

  inline DB_INIT_DYNAMIC_CONFIG_RESP& operator=(const DB_INIT_DYNAMIC_CONFIG_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_INIT_DYNAMIC_CONFIG_RESP& operator=(DB_INIT_DYNAMIC_CONFIG_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_INIT_DYNAMIC_CONFIG_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_INIT_DYNAMIC_CONFIG_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_INIT_DYNAMIC_CONFIG_RESP*>(
               &_DB_INIT_DYNAMIC_CONFIG_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DB_INIT_DYNAMIC_CONFIG_RESP& a, DB_INIT_DYNAMIC_CONFIG_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_INIT_DYNAMIC_CONFIG_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_INIT_DYNAMIC_CONFIG_RESP* New() const final {
    return CreateMaybeMessage<DB_INIT_DYNAMIC_CONFIG_RESP>(nullptr);
  }

  DB_INIT_DYNAMIC_CONFIG_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_INIT_DYNAMIC_CONFIG_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_INIT_DYNAMIC_CONFIG_RESP& from);
  void MergeFrom(const DB_INIT_DYNAMIC_CONFIG_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_INIT_DYNAMIC_CONFIG_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_INIT_DYNAMIC_CONFIG_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
    kRedisConnInitSuccFieldNumber = 2,
    kMysqlConnInitSuccFieldNumber = 3,
  };
  // .CommRespData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommRespData& commdata() const;
  ::CommRespData* release_commdata();
  ::CommRespData* mutable_commdata();
  void set_allocated_commdata(::CommRespData* commdata);
  private:
  const ::CommRespData& _internal_commdata() const;
  ::CommRespData* _internal_mutable_commdata();
  public:

  // bool RedisConnInitSucc = 2;
  void clear_redisconninitsucc();
  bool redisconninitsucc() const;
  void set_redisconninitsucc(bool value);
  private:
  bool _internal_redisconninitsucc() const;
  void _internal_set_redisconninitsucc(bool value);
  public:

  // bool MysqlConnInitSucc = 3;
  void clear_mysqlconninitsucc();
  bool mysqlconninitsucc() const;
  void set_mysqlconninitsucc(bool value);
  private:
  bool _internal_mysqlconninitsucc() const;
  void _internal_set_mysqlconninitsucc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DB_INIT_DYNAMIC_CONFIG_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommRespData* commdata_;
  bool redisconninitsucc_;
  bool mysqlconninitsucc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_GET_ALL_ROLE_PWD_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_GET_ALL_ROLE_PWD_REQ) */ {
 public:
  DB_GET_ALL_ROLE_PWD_REQ();
  virtual ~DB_GET_ALL_ROLE_PWD_REQ();

  DB_GET_ALL_ROLE_PWD_REQ(const DB_GET_ALL_ROLE_PWD_REQ& from);
  DB_GET_ALL_ROLE_PWD_REQ(DB_GET_ALL_ROLE_PWD_REQ&& from) noexcept
    : DB_GET_ALL_ROLE_PWD_REQ() {
    *this = ::std::move(from);
  }

  inline DB_GET_ALL_ROLE_PWD_REQ& operator=(const DB_GET_ALL_ROLE_PWD_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_GET_ALL_ROLE_PWD_REQ& operator=(DB_GET_ALL_ROLE_PWD_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_GET_ALL_ROLE_PWD_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_GET_ALL_ROLE_PWD_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_GET_ALL_ROLE_PWD_REQ*>(
               &_DB_GET_ALL_ROLE_PWD_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DB_GET_ALL_ROLE_PWD_REQ& a, DB_GET_ALL_ROLE_PWD_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_GET_ALL_ROLE_PWD_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_GET_ALL_ROLE_PWD_REQ* New() const final {
    return CreateMaybeMessage<DB_GET_ALL_ROLE_PWD_REQ>(nullptr);
  }

  DB_GET_ALL_ROLE_PWD_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_GET_ALL_ROLE_PWD_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_GET_ALL_ROLE_PWD_REQ& from);
  void MergeFrom(const DB_GET_ALL_ROLE_PWD_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_GET_ALL_ROLE_PWD_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_GET_ALL_ROLE_PWD_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
  };
  // .CommReqData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommReqData& commdata() const;
  ::CommReqData* release_commdata();
  ::CommReqData* mutable_commdata();
  void set_allocated_commdata(::CommReqData* commdata);
  private:
  const ::CommReqData& _internal_commdata() const;
  ::CommReqData* _internal_mutable_commdata();
  public:

  // @@protoc_insertion_point(class_scope:DB_GET_ALL_ROLE_PWD_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommReqData* commdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_GET_ALL_ROLE_PWD_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_GET_ALL_ROLE_PWD_RESP) */ {
 public:
  DB_GET_ALL_ROLE_PWD_RESP();
  virtual ~DB_GET_ALL_ROLE_PWD_RESP();

  DB_GET_ALL_ROLE_PWD_RESP(const DB_GET_ALL_ROLE_PWD_RESP& from);
  DB_GET_ALL_ROLE_PWD_RESP(DB_GET_ALL_ROLE_PWD_RESP&& from) noexcept
    : DB_GET_ALL_ROLE_PWD_RESP() {
    *this = ::std::move(from);
  }

  inline DB_GET_ALL_ROLE_PWD_RESP& operator=(const DB_GET_ALL_ROLE_PWD_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_GET_ALL_ROLE_PWD_RESP& operator=(DB_GET_ALL_ROLE_PWD_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_GET_ALL_ROLE_PWD_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_GET_ALL_ROLE_PWD_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_GET_ALL_ROLE_PWD_RESP*>(
               &_DB_GET_ALL_ROLE_PWD_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DB_GET_ALL_ROLE_PWD_RESP& a, DB_GET_ALL_ROLE_PWD_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_GET_ALL_ROLE_PWD_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_GET_ALL_ROLE_PWD_RESP* New() const final {
    return CreateMaybeMessage<DB_GET_ALL_ROLE_PWD_RESP>(nullptr);
  }

  DB_GET_ALL_ROLE_PWD_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_GET_ALL_ROLE_PWD_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_GET_ALL_ROLE_PWD_RESP& from);
  void MergeFrom(const DB_GET_ALL_ROLE_PWD_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_GET_ALL_ROLE_PWD_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_GET_ALL_ROLE_PWD_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwdFieldNumber = 1,
  };
  // repeated string Pwd = 1;
  int pwd_size() const;
  private:
  int _internal_pwd_size() const;
  public:
  void clear_pwd();
  const std::string& pwd(int index) const;
  std::string* mutable_pwd(int index);
  void set_pwd(int index, const std::string& value);
  void set_pwd(int index, std::string&& value);
  void set_pwd(int index, const char* value);
  void set_pwd(int index, const char* value, size_t size);
  std::string* add_pwd();
  void add_pwd(const std::string& value);
  void add_pwd(std::string&& value);
  void add_pwd(const char* value);
  void add_pwd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pwd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pwd();
  private:
  const std::string& _internal_pwd(int index) const;
  std::string* _internal_add_pwd();
  public:

  // @@protoc_insertion_point(class_scope:DB_GET_ALL_ROLE_PWD_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_CREATE_ROLE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_CREATE_ROLE_REQ) */ {
 public:
  DB_CREATE_ROLE_REQ();
  virtual ~DB_CREATE_ROLE_REQ();

  DB_CREATE_ROLE_REQ(const DB_CREATE_ROLE_REQ& from);
  DB_CREATE_ROLE_REQ(DB_CREATE_ROLE_REQ&& from) noexcept
    : DB_CREATE_ROLE_REQ() {
    *this = ::std::move(from);
  }

  inline DB_CREATE_ROLE_REQ& operator=(const DB_CREATE_ROLE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_CREATE_ROLE_REQ& operator=(DB_CREATE_ROLE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_CREATE_ROLE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_CREATE_ROLE_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_CREATE_ROLE_REQ*>(
               &_DB_CREATE_ROLE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DB_CREATE_ROLE_REQ& a, DB_CREATE_ROLE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_CREATE_ROLE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_CREATE_ROLE_REQ* New() const final {
    return CreateMaybeMessage<DB_CREATE_ROLE_REQ>(nullptr);
  }

  DB_CREATE_ROLE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_CREATE_ROLE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_CREATE_ROLE_REQ& from);
  void MergeFrom(const DB_CREATE_ROLE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_CREATE_ROLE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_CREATE_ROLE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
    kRoleDataFieldNumber = 2,
  };
  // .CommReqData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommReqData& commdata() const;
  ::CommReqData* release_commdata();
  ::CommReqData* mutable_commdata();
  void set_allocated_commdata(::CommReqData* commdata);
  private:
  const ::CommReqData& _internal_commdata() const;
  ::CommReqData* _internal_mutable_commdata();
  public:

  // .RoleData RoleData = 2;
  bool has_roledata() const;
  private:
  bool _internal_has_roledata() const;
  public:
  void clear_roledata();
  const ::RoleData& roledata() const;
  ::RoleData* release_roledata();
  ::RoleData* mutable_roledata();
  void set_allocated_roledata(::RoleData* roledata);
  private:
  const ::RoleData& _internal_roledata() const;
  ::RoleData* _internal_mutable_roledata();
  public:

  // @@protoc_insertion_point(class_scope:DB_CREATE_ROLE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommReqData* commdata_;
  ::RoleData* roledata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_CREATE_ROLE_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_CREATE_ROLE_RESP) */ {
 public:
  DB_CREATE_ROLE_RESP();
  virtual ~DB_CREATE_ROLE_RESP();

  DB_CREATE_ROLE_RESP(const DB_CREATE_ROLE_RESP& from);
  DB_CREATE_ROLE_RESP(DB_CREATE_ROLE_RESP&& from) noexcept
    : DB_CREATE_ROLE_RESP() {
    *this = ::std::move(from);
  }

  inline DB_CREATE_ROLE_RESP& operator=(const DB_CREATE_ROLE_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_CREATE_ROLE_RESP& operator=(DB_CREATE_ROLE_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_CREATE_ROLE_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_CREATE_ROLE_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_CREATE_ROLE_RESP*>(
               &_DB_CREATE_ROLE_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DB_CREATE_ROLE_RESP& a, DB_CREATE_ROLE_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_CREATE_ROLE_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_CREATE_ROLE_RESP* New() const final {
    return CreateMaybeMessage<DB_CREATE_ROLE_RESP>(nullptr);
  }

  DB_CREATE_ROLE_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_CREATE_ROLE_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_CREATE_ROLE_RESP& from);
  void MergeFrom(const DB_CREATE_ROLE_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_CREATE_ROLE_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_CREATE_ROLE_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
  };
  // .CommRespData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommRespData& commdata() const;
  ::CommRespData* release_commdata();
  ::CommRespData* mutable_commdata();
  void set_allocated_commdata(::CommRespData* commdata);
  private:
  const ::CommRespData& _internal_commdata() const;
  ::CommRespData* _internal_mutable_commdata();
  public:

  // @@protoc_insertion_point(class_scope:DB_CREATE_ROLE_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommRespData* commdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_LOAD_ROLE_DATA_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_LOAD_ROLE_DATA_REQ) */ {
 public:
  DB_LOAD_ROLE_DATA_REQ();
  virtual ~DB_LOAD_ROLE_DATA_REQ();

  DB_LOAD_ROLE_DATA_REQ(const DB_LOAD_ROLE_DATA_REQ& from);
  DB_LOAD_ROLE_DATA_REQ(DB_LOAD_ROLE_DATA_REQ&& from) noexcept
    : DB_LOAD_ROLE_DATA_REQ() {
    *this = ::std::move(from);
  }

  inline DB_LOAD_ROLE_DATA_REQ& operator=(const DB_LOAD_ROLE_DATA_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_LOAD_ROLE_DATA_REQ& operator=(DB_LOAD_ROLE_DATA_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_LOAD_ROLE_DATA_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_LOAD_ROLE_DATA_REQ* internal_default_instance() {
    return reinterpret_cast<const DB_LOAD_ROLE_DATA_REQ*>(
               &_DB_LOAD_ROLE_DATA_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DB_LOAD_ROLE_DATA_REQ& a, DB_LOAD_ROLE_DATA_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_LOAD_ROLE_DATA_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_LOAD_ROLE_DATA_REQ* New() const final {
    return CreateMaybeMessage<DB_LOAD_ROLE_DATA_REQ>(nullptr);
  }

  DB_LOAD_ROLE_DATA_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_LOAD_ROLE_DATA_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_LOAD_ROLE_DATA_REQ& from);
  void MergeFrom(const DB_LOAD_ROLE_DATA_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_LOAD_ROLE_DATA_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_LOAD_ROLE_DATA_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // .CommReqData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommReqData& commdata() const;
  ::CommReqData* release_commdata();
  ::CommReqData* mutable_commdata();
  void set_allocated_commdata(::CommReqData* commdata);
  private:
  const ::CommReqData& _internal_commdata() const;
  ::CommReqData* _internal_mutable_commdata();
  public:

  // int32 RoleId = 2;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int32 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DB_LOAD_ROLE_DATA_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommReqData* commdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// -------------------------------------------------------------------

class DB_LOAD_ROLE_DATA_RESP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB_LOAD_ROLE_DATA_RESP) */ {
 public:
  DB_LOAD_ROLE_DATA_RESP();
  virtual ~DB_LOAD_ROLE_DATA_RESP();

  DB_LOAD_ROLE_DATA_RESP(const DB_LOAD_ROLE_DATA_RESP& from);
  DB_LOAD_ROLE_DATA_RESP(DB_LOAD_ROLE_DATA_RESP&& from) noexcept
    : DB_LOAD_ROLE_DATA_RESP() {
    *this = ::std::move(from);
  }

  inline DB_LOAD_ROLE_DATA_RESP& operator=(const DB_LOAD_ROLE_DATA_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DB_LOAD_ROLE_DATA_RESP& operator=(DB_LOAD_ROLE_DATA_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DB_LOAD_ROLE_DATA_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DB_LOAD_ROLE_DATA_RESP* internal_default_instance() {
    return reinterpret_cast<const DB_LOAD_ROLE_DATA_RESP*>(
               &_DB_LOAD_ROLE_DATA_RESP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DB_LOAD_ROLE_DATA_RESP& a, DB_LOAD_ROLE_DATA_RESP& b) {
    a.Swap(&b);
  }
  inline void Swap(DB_LOAD_ROLE_DATA_RESP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DB_LOAD_ROLE_DATA_RESP* New() const final {
    return CreateMaybeMessage<DB_LOAD_ROLE_DATA_RESP>(nullptr);
  }

  DB_LOAD_ROLE_DATA_RESP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DB_LOAD_ROLE_DATA_RESP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DB_LOAD_ROLE_DATA_RESP& from);
  void MergeFrom(const DB_LOAD_ROLE_DATA_RESP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DB_LOAD_ROLE_DATA_RESP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB_LOAD_ROLE_DATA_RESP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbservice_2eproto);
    return ::descriptor_table_dbservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDataFieldNumber = 1,
    kRoleDataFieldNumber = 2,
  };
  // .CommRespData CommData = 1;
  bool has_commdata() const;
  private:
  bool _internal_has_commdata() const;
  public:
  void clear_commdata();
  const ::CommRespData& commdata() const;
  ::CommRespData* release_commdata();
  ::CommRespData* mutable_commdata();
  void set_allocated_commdata(::CommRespData* commdata);
  private:
  const ::CommRespData& _internal_commdata() const;
  ::CommRespData* _internal_mutable_commdata();
  public:

  // .RoleData RoleData = 2;
  bool has_roledata() const;
  private:
  bool _internal_has_roledata() const;
  public:
  void clear_roledata();
  const ::RoleData& roledata() const;
  ::RoleData* release_roledata();
  ::RoleData* mutable_roledata();
  void set_allocated_roledata(::RoleData* roledata);
  private:
  const ::RoleData& _internal_roledata() const;
  ::RoleData* _internal_mutable_roledata();
  public:

  // @@protoc_insertion_point(class_scope:DB_LOAD_ROLE_DATA_RESP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CommRespData* commdata_;
  ::RoleData* roledata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DB_PING_REQ

// int64 Timestamp = 1;
inline void DB_PING_REQ::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_PING_REQ::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_PING_REQ::timestamp() const {
  // @@protoc_insertion_point(field_get:DB_PING_REQ.Timestamp)
  return _internal_timestamp();
}
inline void DB_PING_REQ::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void DB_PING_REQ::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DB_PING_REQ.Timestamp)
}

// -------------------------------------------------------------------

// DB_PING_RESP

// int64 TimeStamp = 1;
inline void DB_PING_RESP::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_PING_RESP::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_PING_RESP::timestamp() const {
  // @@protoc_insertion_point(field_get:DB_PING_RESP.TimeStamp)
  return _internal_timestamp();
}
inline void DB_PING_RESP::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void DB_PING_RESP::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DB_PING_RESP.TimeStamp)
}

// -------------------------------------------------------------------

// DB_HEART_BEAT_REQ

// int64 Timestamp = 1;
inline void DB_HEART_BEAT_REQ::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_HEART_BEAT_REQ::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_HEART_BEAT_REQ::timestamp() const {
  // @@protoc_insertion_point(field_get:DB_HEART_BEAT_REQ.Timestamp)
  return _internal_timestamp();
}
inline void DB_HEART_BEAT_REQ::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void DB_HEART_BEAT_REQ::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DB_HEART_BEAT_REQ.Timestamp)
}

// -------------------------------------------------------------------

// DB_HEART_BEAT_RESP

// int64 Timestamp = 1;
inline void DB_HEART_BEAT_RESP::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_HEART_BEAT_RESP::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DB_HEART_BEAT_RESP::timestamp() const {
  // @@protoc_insertion_point(field_get:DB_HEART_BEAT_RESP.Timestamp)
  return _internal_timestamp();
}
inline void DB_HEART_BEAT_RESP::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void DB_HEART_BEAT_RESP::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DB_HEART_BEAT_RESP.Timestamp)
}

// -------------------------------------------------------------------

// CommReqData

// int32 ServerId = 1;
inline void CommReqData::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommReqData::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommReqData::serverid() const {
  // @@protoc_insertion_point(field_get:CommReqData.ServerId)
  return _internal_serverid();
}
inline void CommReqData::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void CommReqData::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:CommReqData.ServerId)
}

// -------------------------------------------------------------------

// CommRespData

// bool Status = 1;
inline void CommRespData::clear_status() {
  status_ = false;
}
inline bool CommRespData::_internal_status() const {
  return status_;
}
inline bool CommRespData::status() const {
  // @@protoc_insertion_point(field_get:CommRespData.Status)
  return _internal_status();
}
inline void CommRespData::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CommRespData::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CommRespData.Status)
}

// string Msg = 2;
inline void CommRespData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommRespData::msg() const {
  // @@protoc_insertion_point(field_get:CommRespData.Msg)
  return _internal_msg();
}
inline void CommRespData::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:CommRespData.Msg)
}
inline std::string* CommRespData::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:CommRespData.Msg)
  return _internal_mutable_msg();
}
inline const std::string& CommRespData::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void CommRespData::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommRespData::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommRespData.Msg)
}
inline void CommRespData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommRespData.Msg)
}
inline void CommRespData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommRespData.Msg)
}
inline std::string* CommRespData::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommRespData::release_msg() {
  // @@protoc_insertion_point(field_release:CommRespData.Msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommRespData::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:CommRespData.Msg)
}

// -------------------------------------------------------------------

// RedisConfig

// string RedisIP = 1;
inline void RedisConfig::clear_redisip() {
  redisip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedisConfig::redisip() const {
  // @@protoc_insertion_point(field_get:RedisConfig.RedisIP)
  return _internal_redisip();
}
inline void RedisConfig::set_redisip(const std::string& value) {
  _internal_set_redisip(value);
  // @@protoc_insertion_point(field_set:RedisConfig.RedisIP)
}
inline std::string* RedisConfig::mutable_redisip() {
  // @@protoc_insertion_point(field_mutable:RedisConfig.RedisIP)
  return _internal_mutable_redisip();
}
inline const std::string& RedisConfig::_internal_redisip() const {
  return redisip_.GetNoArena();
}
inline void RedisConfig::_internal_set_redisip(const std::string& value) {
  
  redisip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedisConfig::set_redisip(std::string&& value) {
  
  redisip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedisConfig.RedisIP)
}
inline void RedisConfig::set_redisip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redisip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedisConfig.RedisIP)
}
inline void RedisConfig::set_redisip(const char* value, size_t size) {
  
  redisip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedisConfig.RedisIP)
}
inline std::string* RedisConfig::_internal_mutable_redisip() {
  
  return redisip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedisConfig::release_redisip() {
  // @@protoc_insertion_point(field_release:RedisConfig.RedisIP)
  
  return redisip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedisConfig::set_allocated_redisip(std::string* redisip) {
  if (redisip != nullptr) {
    
  } else {
    
  }
  redisip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redisip);
  // @@protoc_insertion_point(field_set_allocated:RedisConfig.RedisIP)
}

// int32 RedisPort = 2;
inline void RedisConfig::clear_redisport() {
  redisport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedisConfig::_internal_redisport() const {
  return redisport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RedisConfig::redisport() const {
  // @@protoc_insertion_point(field_get:RedisConfig.RedisPort)
  return _internal_redisport();
}
inline void RedisConfig::_internal_set_redisport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  redisport_ = value;
}
inline void RedisConfig::set_redisport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_redisport(value);
  // @@protoc_insertion_point(field_set:RedisConfig.RedisPort)
}

// -------------------------------------------------------------------

// MysqlConfig

// string IP = 1;
inline void MysqlConfig::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MysqlConfig::ip() const {
  // @@protoc_insertion_point(field_get:MysqlConfig.IP)
  return _internal_ip();
}
inline void MysqlConfig::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:MysqlConfig.IP)
}
inline std::string* MysqlConfig::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:MysqlConfig.IP)
  return _internal_mutable_ip();
}
inline const std::string& MysqlConfig::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MysqlConfig::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MysqlConfig::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlConfig.IP)
}
inline void MysqlConfig::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlConfig.IP)
}
inline void MysqlConfig::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlConfig.IP)
}
inline std::string* MysqlConfig::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MysqlConfig::release_ip() {
  // @@protoc_insertion_point(field_release:MysqlConfig.IP)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConfig::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:MysqlConfig.IP)
}

// int32 Port = 2;
inline void MysqlConfig::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MysqlConfig::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MysqlConfig::port() const {
  // @@protoc_insertion_point(field_get:MysqlConfig.Port)
  return _internal_port();
}
inline void MysqlConfig::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MysqlConfig::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MysqlConfig.Port)
}

// string Username = 3;
inline void MysqlConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MysqlConfig::username() const {
  // @@protoc_insertion_point(field_get:MysqlConfig.Username)
  return _internal_username();
}
inline void MysqlConfig::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MysqlConfig.Username)
}
inline std::string* MysqlConfig::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MysqlConfig.Username)
  return _internal_mutable_username();
}
inline const std::string& MysqlConfig::_internal_username() const {
  return username_.GetNoArena();
}
inline void MysqlConfig::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MysqlConfig::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlConfig.Username)
}
inline void MysqlConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlConfig.Username)
}
inline void MysqlConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlConfig.Username)
}
inline std::string* MysqlConfig::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MysqlConfig::release_username() {
  // @@protoc_insertion_point(field_release:MysqlConfig.Username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConfig::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MysqlConfig.Username)
}

// string Password = 4;
inline void MysqlConfig::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MysqlConfig::password() const {
  // @@protoc_insertion_point(field_get:MysqlConfig.Password)
  return _internal_password();
}
inline void MysqlConfig::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MysqlConfig.Password)
}
inline std::string* MysqlConfig::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MysqlConfig.Password)
  return _internal_mutable_password();
}
inline const std::string& MysqlConfig::_internal_password() const {
  return password_.GetNoArena();
}
inline void MysqlConfig::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MysqlConfig::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlConfig.Password)
}
inline void MysqlConfig::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlConfig.Password)
}
inline void MysqlConfig::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlConfig.Password)
}
inline std::string* MysqlConfig::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MysqlConfig::release_password() {
  // @@protoc_insertion_point(field_release:MysqlConfig.Password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConfig::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:MysqlConfig.Password)
}

// string DBName = 5;
inline void MysqlConfig::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MysqlConfig::dbname() const {
  // @@protoc_insertion_point(field_get:MysqlConfig.DBName)
  return _internal_dbname();
}
inline void MysqlConfig::set_dbname(const std::string& value) {
  _internal_set_dbname(value);
  // @@protoc_insertion_point(field_set:MysqlConfig.DBName)
}
inline std::string* MysqlConfig::mutable_dbname() {
  // @@protoc_insertion_point(field_mutable:MysqlConfig.DBName)
  return _internal_mutable_dbname();
}
inline const std::string& MysqlConfig::_internal_dbname() const {
  return dbname_.GetNoArena();
}
inline void MysqlConfig::_internal_set_dbname(const std::string& value) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MysqlConfig::set_dbname(std::string&& value) {
  
  dbname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlConfig.DBName)
}
inline void MysqlConfig::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlConfig.DBName)
}
inline void MysqlConfig::set_dbname(const char* value, size_t size) {
  
  dbname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlConfig.DBName)
}
inline std::string* MysqlConfig::_internal_mutable_dbname() {
  
  return dbname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MysqlConfig::release_dbname() {
  // @@protoc_insertion_point(field_release:MysqlConfig.DBName)
  
  return dbname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlConfig::set_allocated_dbname(std::string* dbname) {
  if (dbname != nullptr) {
    
  } else {
    
  }
  dbname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:MysqlConfig.DBName)
}

// -------------------------------------------------------------------

// RoleData

// string RoleName = 2;
inline void RoleData::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::rolename() const {
  // @@protoc_insertion_point(field_get:RoleData.RoleName)
  return _internal_rolename();
}
inline void RoleData::set_rolename(const std::string& value) {
  _internal_set_rolename(value);
  // @@protoc_insertion_point(field_set:RoleData.RoleName)
}
inline std::string* RoleData::mutable_rolename() {
  // @@protoc_insertion_point(field_mutable:RoleData.RoleName)
  return _internal_mutable_rolename();
}
inline const std::string& RoleData::_internal_rolename() const {
  return rolename_.GetNoArena();
}
inline void RoleData::_internal_set_rolename(const std::string& value) {
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_rolename(std::string&& value) {
  
  rolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.RoleName)
}
inline void RoleData::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.RoleName)
}
inline void RoleData::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.RoleName)
}
inline std::string* RoleData::_internal_mutable_rolename() {
  
  return rolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_rolename() {
  // @@protoc_insertion_point(field_release:RoleData.RoleName)
  
  return rolename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:RoleData.RoleName)
}

// string Account = 3;
inline void RoleData::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::account() const {
  // @@protoc_insertion_point(field_get:RoleData.Account)
  return _internal_account();
}
inline void RoleData::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:RoleData.Account)
}
inline std::string* RoleData::mutable_account() {
  // @@protoc_insertion_point(field_mutable:RoleData.Account)
  return _internal_mutable_account();
}
inline const std::string& RoleData::_internal_account() const {
  return account_.GetNoArena();
}
inline void RoleData::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.Account)
}
inline void RoleData::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.Account)
}
inline void RoleData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.Account)
}
inline std::string* RoleData::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_account() {
  // @@protoc_insertion_point(field_release:RoleData.Account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:RoleData.Account)
}

// string EquipBaseData = 4;
inline void RoleData::clear_equipbasedata() {
  equipbasedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::equipbasedata() const {
  // @@protoc_insertion_point(field_get:RoleData.EquipBaseData)
  return _internal_equipbasedata();
}
inline void RoleData::set_equipbasedata(const std::string& value) {
  _internal_set_equipbasedata(value);
  // @@protoc_insertion_point(field_set:RoleData.EquipBaseData)
}
inline std::string* RoleData::mutable_equipbasedata() {
  // @@protoc_insertion_point(field_mutable:RoleData.EquipBaseData)
  return _internal_mutable_equipbasedata();
}
inline const std::string& RoleData::_internal_equipbasedata() const {
  return equipbasedata_.GetNoArena();
}
inline void RoleData::_internal_set_equipbasedata(const std::string& value) {
  
  equipbasedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_equipbasedata(std::string&& value) {
  
  equipbasedata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.EquipBaseData)
}
inline void RoleData::set_equipbasedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equipbasedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.EquipBaseData)
}
inline void RoleData::set_equipbasedata(const char* value, size_t size) {
  
  equipbasedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.EquipBaseData)
}
inline std::string* RoleData::_internal_mutable_equipbasedata() {
  
  return equipbasedata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_equipbasedata() {
  // @@protoc_insertion_point(field_release:RoleData.EquipBaseData)
  
  return equipbasedata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_equipbasedata(std::string* equipbasedata) {
  if (equipbasedata != nullptr) {
    
  } else {
    
  }
  equipbasedata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipbasedata);
  // @@protoc_insertion_point(field_set_allocated:RoleData.EquipBaseData)
}

// string EquipExtData = 5;
inline void RoleData::clear_equipextdata() {
  equipextdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::equipextdata() const {
  // @@protoc_insertion_point(field_get:RoleData.EquipExtData)
  return _internal_equipextdata();
}
inline void RoleData::set_equipextdata(const std::string& value) {
  _internal_set_equipextdata(value);
  // @@protoc_insertion_point(field_set:RoleData.EquipExtData)
}
inline std::string* RoleData::mutable_equipextdata() {
  // @@protoc_insertion_point(field_mutable:RoleData.EquipExtData)
  return _internal_mutable_equipextdata();
}
inline const std::string& RoleData::_internal_equipextdata() const {
  return equipextdata_.GetNoArena();
}
inline void RoleData::_internal_set_equipextdata(const std::string& value) {
  
  equipextdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_equipextdata(std::string&& value) {
  
  equipextdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.EquipExtData)
}
inline void RoleData::set_equipextdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equipextdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.EquipExtData)
}
inline void RoleData::set_equipextdata(const char* value, size_t size) {
  
  equipextdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.EquipExtData)
}
inline std::string* RoleData::_internal_mutable_equipextdata() {
  
  return equipextdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_equipextdata() {
  // @@protoc_insertion_point(field_release:RoleData.EquipExtData)
  
  return equipextdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_equipextdata(std::string* equipextdata) {
  if (equipextdata != nullptr) {
    
  } else {
    
  }
  equipextdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipextdata);
  // @@protoc_insertion_point(field_set_allocated:RoleData.EquipExtData)
}

// string ItemData = 6;
inline void RoleData::clear_itemdata() {
  itemdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::itemdata() const {
  // @@protoc_insertion_point(field_get:RoleData.ItemData)
  return _internal_itemdata();
}
inline void RoleData::set_itemdata(const std::string& value) {
  _internal_set_itemdata(value);
  // @@protoc_insertion_point(field_set:RoleData.ItemData)
}
inline std::string* RoleData::mutable_itemdata() {
  // @@protoc_insertion_point(field_mutable:RoleData.ItemData)
  return _internal_mutable_itemdata();
}
inline const std::string& RoleData::_internal_itemdata() const {
  return itemdata_.GetNoArena();
}
inline void RoleData::_internal_set_itemdata(const std::string& value) {
  
  itemdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_itemdata(std::string&& value) {
  
  itemdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.ItemData)
}
inline void RoleData::set_itemdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  itemdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.ItemData)
}
inline void RoleData::set_itemdata(const char* value, size_t size) {
  
  itemdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.ItemData)
}
inline std::string* RoleData::_internal_mutable_itemdata() {
  
  return itemdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_itemdata() {
  // @@protoc_insertion_point(field_release:RoleData.ItemData)
  
  return itemdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_itemdata(std::string* itemdata) {
  if (itemdata != nullptr) {
    
  } else {
    
  }
  itemdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemdata);
  // @@protoc_insertion_point(field_set_allocated:RoleData.ItemData)
}

// string PetData = 7;
inline void RoleData::clear_petdata() {
  petdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleData::petdata() const {
  // @@protoc_insertion_point(field_get:RoleData.PetData)
  return _internal_petdata();
}
inline void RoleData::set_petdata(const std::string& value) {
  _internal_set_petdata(value);
  // @@protoc_insertion_point(field_set:RoleData.PetData)
}
inline std::string* RoleData::mutable_petdata() {
  // @@protoc_insertion_point(field_mutable:RoleData.PetData)
  return _internal_mutable_petdata();
}
inline const std::string& RoleData::_internal_petdata() const {
  return petdata_.GetNoArena();
}
inline void RoleData::_internal_set_petdata(const std::string& value) {
  
  petdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleData::set_petdata(std::string&& value) {
  
  petdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoleData.PetData)
}
inline void RoleData::set_petdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  petdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoleData.PetData)
}
inline void RoleData::set_petdata(const char* value, size_t size) {
  
  petdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoleData.PetData)
}
inline std::string* RoleData::_internal_mutable_petdata() {
  
  return petdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleData::release_petdata() {
  // @@protoc_insertion_point(field_release:RoleData.PetData)
  
  return petdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleData::set_allocated_petdata(std::string* petdata) {
  if (petdata != nullptr) {
    
  } else {
    
  }
  petdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), petdata);
  // @@protoc_insertion_point(field_set_allocated:RoleData.PetData)
}

// -------------------------------------------------------------------

// DB_INIT_DYNAIMC_CONFIG_REQ

// .RedisConfig RedisCfg = 1;
inline bool DB_INIT_DYNAIMC_CONFIG_REQ::_internal_has_rediscfg() const {
  return this != internal_default_instance() && rediscfg_ != nullptr;
}
inline bool DB_INIT_DYNAIMC_CONFIG_REQ::has_rediscfg() const {
  return _internal_has_rediscfg();
}
inline void DB_INIT_DYNAIMC_CONFIG_REQ::clear_rediscfg() {
  if (GetArenaNoVirtual() == nullptr && rediscfg_ != nullptr) {
    delete rediscfg_;
  }
  rediscfg_ = nullptr;
}
inline const ::RedisConfig& DB_INIT_DYNAIMC_CONFIG_REQ::_internal_rediscfg() const {
  const ::RedisConfig* p = rediscfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RedisConfig*>(
      &::_RedisConfig_default_instance_);
}
inline const ::RedisConfig& DB_INIT_DYNAIMC_CONFIG_REQ::rediscfg() const {
  // @@protoc_insertion_point(field_get:DB_INIT_DYNAIMC_CONFIG_REQ.RedisCfg)
  return _internal_rediscfg();
}
inline ::RedisConfig* DB_INIT_DYNAIMC_CONFIG_REQ::release_rediscfg() {
  // @@protoc_insertion_point(field_release:DB_INIT_DYNAIMC_CONFIG_REQ.RedisCfg)
  
  ::RedisConfig* temp = rediscfg_;
  rediscfg_ = nullptr;
  return temp;
}
inline ::RedisConfig* DB_INIT_DYNAIMC_CONFIG_REQ::_internal_mutable_rediscfg() {
  
  if (rediscfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::RedisConfig>(GetArenaNoVirtual());
    rediscfg_ = p;
  }
  return rediscfg_;
}
inline ::RedisConfig* DB_INIT_DYNAIMC_CONFIG_REQ::mutable_rediscfg() {
  // @@protoc_insertion_point(field_mutable:DB_INIT_DYNAIMC_CONFIG_REQ.RedisCfg)
  return _internal_mutable_rediscfg();
}
inline void DB_INIT_DYNAIMC_CONFIG_REQ::set_allocated_rediscfg(::RedisConfig* rediscfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rediscfg_;
  }
  if (rediscfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rediscfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rediscfg, submessage_arena);
    }
    
  } else {
    
  }
  rediscfg_ = rediscfg;
  // @@protoc_insertion_point(field_set_allocated:DB_INIT_DYNAIMC_CONFIG_REQ.RedisCfg)
}

// .MysqlConfig MysqlCfg = 2;
inline bool DB_INIT_DYNAIMC_CONFIG_REQ::_internal_has_mysqlcfg() const {
  return this != internal_default_instance() && mysqlcfg_ != nullptr;
}
inline bool DB_INIT_DYNAIMC_CONFIG_REQ::has_mysqlcfg() const {
  return _internal_has_mysqlcfg();
}
inline void DB_INIT_DYNAIMC_CONFIG_REQ::clear_mysqlcfg() {
  if (GetArenaNoVirtual() == nullptr && mysqlcfg_ != nullptr) {
    delete mysqlcfg_;
  }
  mysqlcfg_ = nullptr;
}
inline const ::MysqlConfig& DB_INIT_DYNAIMC_CONFIG_REQ::_internal_mysqlcfg() const {
  const ::MysqlConfig* p = mysqlcfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MysqlConfig*>(
      &::_MysqlConfig_default_instance_);
}
inline const ::MysqlConfig& DB_INIT_DYNAIMC_CONFIG_REQ::mysqlcfg() const {
  // @@protoc_insertion_point(field_get:DB_INIT_DYNAIMC_CONFIG_REQ.MysqlCfg)
  return _internal_mysqlcfg();
}
inline ::MysqlConfig* DB_INIT_DYNAIMC_CONFIG_REQ::release_mysqlcfg() {
  // @@protoc_insertion_point(field_release:DB_INIT_DYNAIMC_CONFIG_REQ.MysqlCfg)
  
  ::MysqlConfig* temp = mysqlcfg_;
  mysqlcfg_ = nullptr;
  return temp;
}
inline ::MysqlConfig* DB_INIT_DYNAIMC_CONFIG_REQ::_internal_mutable_mysqlcfg() {
  
  if (mysqlcfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MysqlConfig>(GetArenaNoVirtual());
    mysqlcfg_ = p;
  }
  return mysqlcfg_;
}
inline ::MysqlConfig* DB_INIT_DYNAIMC_CONFIG_REQ::mutable_mysqlcfg() {
  // @@protoc_insertion_point(field_mutable:DB_INIT_DYNAIMC_CONFIG_REQ.MysqlCfg)
  return _internal_mutable_mysqlcfg();
}
inline void DB_INIT_DYNAIMC_CONFIG_REQ::set_allocated_mysqlcfg(::MysqlConfig* mysqlcfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mysqlcfg_;
  }
  if (mysqlcfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mysqlcfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mysqlcfg, submessage_arena);
    }
    
  } else {
    
  }
  mysqlcfg_ = mysqlcfg;
  // @@protoc_insertion_point(field_set_allocated:DB_INIT_DYNAIMC_CONFIG_REQ.MysqlCfg)
}

// -------------------------------------------------------------------

// DB_INIT_DYNAMIC_CONFIG_RESP

// .CommRespData CommData = 1;
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommRespData& DB_INIT_DYNAMIC_CONFIG_RESP::_internal_commdata() const {
  const ::CommRespData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommRespData*>(
      &::_CommRespData_default_instance_);
}
inline const ::CommRespData& DB_INIT_DYNAMIC_CONFIG_RESP::commdata() const {
  // @@protoc_insertion_point(field_get:DB_INIT_DYNAMIC_CONFIG_RESP.CommData)
  return _internal_commdata();
}
inline ::CommRespData* DB_INIT_DYNAMIC_CONFIG_RESP::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_INIT_DYNAMIC_CONFIG_RESP.CommData)
  
  ::CommRespData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommRespData* DB_INIT_DYNAMIC_CONFIG_RESP::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommRespData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommRespData* DB_INIT_DYNAMIC_CONFIG_RESP::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_INIT_DYNAMIC_CONFIG_RESP.CommData)
  return _internal_mutable_commdata();
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::set_allocated_commdata(::CommRespData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_INIT_DYNAMIC_CONFIG_RESP.CommData)
}

// bool RedisConnInitSucc = 2;
inline void DB_INIT_DYNAMIC_CONFIG_RESP::clear_redisconninitsucc() {
  redisconninitsucc_ = false;
}
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::_internal_redisconninitsucc() const {
  return redisconninitsucc_;
}
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::redisconninitsucc() const {
  // @@protoc_insertion_point(field_get:DB_INIT_DYNAMIC_CONFIG_RESP.RedisConnInitSucc)
  return _internal_redisconninitsucc();
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::_internal_set_redisconninitsucc(bool value) {
  
  redisconninitsucc_ = value;
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::set_redisconninitsucc(bool value) {
  _internal_set_redisconninitsucc(value);
  // @@protoc_insertion_point(field_set:DB_INIT_DYNAMIC_CONFIG_RESP.RedisConnInitSucc)
}

// bool MysqlConnInitSucc = 3;
inline void DB_INIT_DYNAMIC_CONFIG_RESP::clear_mysqlconninitsucc() {
  mysqlconninitsucc_ = false;
}
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::_internal_mysqlconninitsucc() const {
  return mysqlconninitsucc_;
}
inline bool DB_INIT_DYNAMIC_CONFIG_RESP::mysqlconninitsucc() const {
  // @@protoc_insertion_point(field_get:DB_INIT_DYNAMIC_CONFIG_RESP.MysqlConnInitSucc)
  return _internal_mysqlconninitsucc();
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::_internal_set_mysqlconninitsucc(bool value) {
  
  mysqlconninitsucc_ = value;
}
inline void DB_INIT_DYNAMIC_CONFIG_RESP::set_mysqlconninitsucc(bool value) {
  _internal_set_mysqlconninitsucc(value);
  // @@protoc_insertion_point(field_set:DB_INIT_DYNAMIC_CONFIG_RESP.MysqlConnInitSucc)
}

// -------------------------------------------------------------------

// DB_GET_ALL_ROLE_PWD_REQ

// .CommReqData CommData = 1;
inline bool DB_GET_ALL_ROLE_PWD_REQ::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_GET_ALL_ROLE_PWD_REQ::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_GET_ALL_ROLE_PWD_REQ::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommReqData& DB_GET_ALL_ROLE_PWD_REQ::_internal_commdata() const {
  const ::CommReqData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommReqData*>(
      &::_CommReqData_default_instance_);
}
inline const ::CommReqData& DB_GET_ALL_ROLE_PWD_REQ::commdata() const {
  // @@protoc_insertion_point(field_get:DB_GET_ALL_ROLE_PWD_REQ.CommData)
  return _internal_commdata();
}
inline ::CommReqData* DB_GET_ALL_ROLE_PWD_REQ::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_GET_ALL_ROLE_PWD_REQ.CommData)
  
  ::CommReqData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommReqData* DB_GET_ALL_ROLE_PWD_REQ::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommReqData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommReqData* DB_GET_ALL_ROLE_PWD_REQ::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_GET_ALL_ROLE_PWD_REQ.CommData)
  return _internal_mutable_commdata();
}
inline void DB_GET_ALL_ROLE_PWD_REQ::set_allocated_commdata(::CommReqData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_GET_ALL_ROLE_PWD_REQ.CommData)
}

// -------------------------------------------------------------------

// DB_GET_ALL_ROLE_PWD_RESP

// repeated string Pwd = 1;
inline int DB_GET_ALL_ROLE_PWD_RESP::_internal_pwd_size() const {
  return pwd_.size();
}
inline int DB_GET_ALL_ROLE_PWD_RESP::pwd_size() const {
  return _internal_pwd_size();
}
inline void DB_GET_ALL_ROLE_PWD_RESP::clear_pwd() {
  pwd_.Clear();
}
inline std::string* DB_GET_ALL_ROLE_PWD_RESP::add_pwd() {
  // @@protoc_insertion_point(field_add_mutable:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  return _internal_add_pwd();
}
inline const std::string& DB_GET_ALL_ROLE_PWD_RESP::_internal_pwd(int index) const {
  return pwd_.Get(index);
}
inline const std::string& DB_GET_ALL_ROLE_PWD_RESP::pwd(int index) const {
  // @@protoc_insertion_point(field_get:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  return _internal_pwd(index);
}
inline std::string* DB_GET_ALL_ROLE_PWD_RESP::mutable_pwd(int index) {
  // @@protoc_insertion_point(field_mutable:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  return pwd_.Mutable(index);
}
inline void DB_GET_ALL_ROLE_PWD_RESP::set_pwd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  pwd_.Mutable(index)->assign(value);
}
inline void DB_GET_ALL_ROLE_PWD_RESP::set_pwd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  pwd_.Mutable(index)->assign(std::move(value));
}
inline void DB_GET_ALL_ROLE_PWD_RESP::set_pwd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pwd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline void DB_GET_ALL_ROLE_PWD_RESP::set_pwd(int index, const char* value, size_t size) {
  pwd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline std::string* DB_GET_ALL_ROLE_PWD_RESP::_internal_add_pwd() {
  return pwd_.Add();
}
inline void DB_GET_ALL_ROLE_PWD_RESP::add_pwd(const std::string& value) {
  pwd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline void DB_GET_ALL_ROLE_PWD_RESP::add_pwd(std::string&& value) {
  pwd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline void DB_GET_ALL_ROLE_PWD_RESP::add_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pwd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline void DB_GET_ALL_ROLE_PWD_RESP::add_pwd(const char* value, size_t size) {
  pwd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DB_GET_ALL_ROLE_PWD_RESP::pwd() const {
  // @@protoc_insertion_point(field_list:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  return pwd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DB_GET_ALL_ROLE_PWD_RESP::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable_list:DB_GET_ALL_ROLE_PWD_RESP.Pwd)
  return &pwd_;
}

// -------------------------------------------------------------------

// DB_CREATE_ROLE_REQ

// .CommReqData CommData = 1;
inline bool DB_CREATE_ROLE_REQ::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_CREATE_ROLE_REQ::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_CREATE_ROLE_REQ::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommReqData& DB_CREATE_ROLE_REQ::_internal_commdata() const {
  const ::CommReqData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommReqData*>(
      &::_CommReqData_default_instance_);
}
inline const ::CommReqData& DB_CREATE_ROLE_REQ::commdata() const {
  // @@protoc_insertion_point(field_get:DB_CREATE_ROLE_REQ.CommData)
  return _internal_commdata();
}
inline ::CommReqData* DB_CREATE_ROLE_REQ::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_CREATE_ROLE_REQ.CommData)
  
  ::CommReqData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommReqData* DB_CREATE_ROLE_REQ::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommReqData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommReqData* DB_CREATE_ROLE_REQ::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_CREATE_ROLE_REQ.CommData)
  return _internal_mutable_commdata();
}
inline void DB_CREATE_ROLE_REQ::set_allocated_commdata(::CommReqData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_CREATE_ROLE_REQ.CommData)
}

// .RoleData RoleData = 2;
inline bool DB_CREATE_ROLE_REQ::_internal_has_roledata() const {
  return this != internal_default_instance() && roledata_ != nullptr;
}
inline bool DB_CREATE_ROLE_REQ::has_roledata() const {
  return _internal_has_roledata();
}
inline void DB_CREATE_ROLE_REQ::clear_roledata() {
  if (GetArenaNoVirtual() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
}
inline const ::RoleData& DB_CREATE_ROLE_REQ::_internal_roledata() const {
  const ::RoleData* p = roledata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoleData*>(
      &::_RoleData_default_instance_);
}
inline const ::RoleData& DB_CREATE_ROLE_REQ::roledata() const {
  // @@protoc_insertion_point(field_get:DB_CREATE_ROLE_REQ.RoleData)
  return _internal_roledata();
}
inline ::RoleData* DB_CREATE_ROLE_REQ::release_roledata() {
  // @@protoc_insertion_point(field_release:DB_CREATE_ROLE_REQ.RoleData)
  
  ::RoleData* temp = roledata_;
  roledata_ = nullptr;
  return temp;
}
inline ::RoleData* DB_CREATE_ROLE_REQ::_internal_mutable_roledata() {
  
  if (roledata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoleData>(GetArenaNoVirtual());
    roledata_ = p;
  }
  return roledata_;
}
inline ::RoleData* DB_CREATE_ROLE_REQ::mutable_roledata() {
  // @@protoc_insertion_point(field_mutable:DB_CREATE_ROLE_REQ.RoleData)
  return _internal_mutable_roledata();
}
inline void DB_CREATE_ROLE_REQ::set_allocated_roledata(::RoleData* roledata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roledata_;
  }
  if (roledata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roledata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roledata, submessage_arena);
    }
    
  } else {
    
  }
  roledata_ = roledata;
  // @@protoc_insertion_point(field_set_allocated:DB_CREATE_ROLE_REQ.RoleData)
}

// -------------------------------------------------------------------

// DB_CREATE_ROLE_RESP

// .CommRespData CommData = 1;
inline bool DB_CREATE_ROLE_RESP::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_CREATE_ROLE_RESP::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_CREATE_ROLE_RESP::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommRespData& DB_CREATE_ROLE_RESP::_internal_commdata() const {
  const ::CommRespData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommRespData*>(
      &::_CommRespData_default_instance_);
}
inline const ::CommRespData& DB_CREATE_ROLE_RESP::commdata() const {
  // @@protoc_insertion_point(field_get:DB_CREATE_ROLE_RESP.CommData)
  return _internal_commdata();
}
inline ::CommRespData* DB_CREATE_ROLE_RESP::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_CREATE_ROLE_RESP.CommData)
  
  ::CommRespData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommRespData* DB_CREATE_ROLE_RESP::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommRespData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommRespData* DB_CREATE_ROLE_RESP::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_CREATE_ROLE_RESP.CommData)
  return _internal_mutable_commdata();
}
inline void DB_CREATE_ROLE_RESP::set_allocated_commdata(::CommRespData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_CREATE_ROLE_RESP.CommData)
}

// -------------------------------------------------------------------

// DB_LOAD_ROLE_DATA_REQ

// .CommReqData CommData = 1;
inline bool DB_LOAD_ROLE_DATA_REQ::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_LOAD_ROLE_DATA_REQ::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_LOAD_ROLE_DATA_REQ::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommReqData& DB_LOAD_ROLE_DATA_REQ::_internal_commdata() const {
  const ::CommReqData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommReqData*>(
      &::_CommReqData_default_instance_);
}
inline const ::CommReqData& DB_LOAD_ROLE_DATA_REQ::commdata() const {
  // @@protoc_insertion_point(field_get:DB_LOAD_ROLE_DATA_REQ.CommData)
  return _internal_commdata();
}
inline ::CommReqData* DB_LOAD_ROLE_DATA_REQ::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_LOAD_ROLE_DATA_REQ.CommData)
  
  ::CommReqData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommReqData* DB_LOAD_ROLE_DATA_REQ::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommReqData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommReqData* DB_LOAD_ROLE_DATA_REQ::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_LOAD_ROLE_DATA_REQ.CommData)
  return _internal_mutable_commdata();
}
inline void DB_LOAD_ROLE_DATA_REQ::set_allocated_commdata(::CommReqData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_LOAD_ROLE_DATA_REQ.CommData)
}

// int32 RoleId = 2;
inline void DB_LOAD_ROLE_DATA_REQ::clear_roleid() {
  roleid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DB_LOAD_ROLE_DATA_REQ::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DB_LOAD_ROLE_DATA_REQ::roleid() const {
  // @@protoc_insertion_point(field_get:DB_LOAD_ROLE_DATA_REQ.RoleId)
  return _internal_roleid();
}
inline void DB_LOAD_ROLE_DATA_REQ::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roleid_ = value;
}
inline void DB_LOAD_ROLE_DATA_REQ::set_roleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:DB_LOAD_ROLE_DATA_REQ.RoleId)
}

// -------------------------------------------------------------------

// DB_LOAD_ROLE_DATA_RESP

// .CommRespData CommData = 1;
inline bool DB_LOAD_ROLE_DATA_RESP::_internal_has_commdata() const {
  return this != internal_default_instance() && commdata_ != nullptr;
}
inline bool DB_LOAD_ROLE_DATA_RESP::has_commdata() const {
  return _internal_has_commdata();
}
inline void DB_LOAD_ROLE_DATA_RESP::clear_commdata() {
  if (GetArenaNoVirtual() == nullptr && commdata_ != nullptr) {
    delete commdata_;
  }
  commdata_ = nullptr;
}
inline const ::CommRespData& DB_LOAD_ROLE_DATA_RESP::_internal_commdata() const {
  const ::CommRespData* p = commdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommRespData*>(
      &::_CommRespData_default_instance_);
}
inline const ::CommRespData& DB_LOAD_ROLE_DATA_RESP::commdata() const {
  // @@protoc_insertion_point(field_get:DB_LOAD_ROLE_DATA_RESP.CommData)
  return _internal_commdata();
}
inline ::CommRespData* DB_LOAD_ROLE_DATA_RESP::release_commdata() {
  // @@protoc_insertion_point(field_release:DB_LOAD_ROLE_DATA_RESP.CommData)
  
  ::CommRespData* temp = commdata_;
  commdata_ = nullptr;
  return temp;
}
inline ::CommRespData* DB_LOAD_ROLE_DATA_RESP::_internal_mutable_commdata() {
  
  if (commdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommRespData>(GetArenaNoVirtual());
    commdata_ = p;
  }
  return commdata_;
}
inline ::CommRespData* DB_LOAD_ROLE_DATA_RESP::mutable_commdata() {
  // @@protoc_insertion_point(field_mutable:DB_LOAD_ROLE_DATA_RESP.CommData)
  return _internal_mutable_commdata();
}
inline void DB_LOAD_ROLE_DATA_RESP::set_allocated_commdata(::CommRespData* commdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commdata_;
  }
  if (commdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commdata, submessage_arena);
    }
    
  } else {
    
  }
  commdata_ = commdata;
  // @@protoc_insertion_point(field_set_allocated:DB_LOAD_ROLE_DATA_RESP.CommData)
}

// .RoleData RoleData = 2;
inline bool DB_LOAD_ROLE_DATA_RESP::_internal_has_roledata() const {
  return this != internal_default_instance() && roledata_ != nullptr;
}
inline bool DB_LOAD_ROLE_DATA_RESP::has_roledata() const {
  return _internal_has_roledata();
}
inline void DB_LOAD_ROLE_DATA_RESP::clear_roledata() {
  if (GetArenaNoVirtual() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
}
inline const ::RoleData& DB_LOAD_ROLE_DATA_RESP::_internal_roledata() const {
  const ::RoleData* p = roledata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoleData*>(
      &::_RoleData_default_instance_);
}
inline const ::RoleData& DB_LOAD_ROLE_DATA_RESP::roledata() const {
  // @@protoc_insertion_point(field_get:DB_LOAD_ROLE_DATA_RESP.RoleData)
  return _internal_roledata();
}
inline ::RoleData* DB_LOAD_ROLE_DATA_RESP::release_roledata() {
  // @@protoc_insertion_point(field_release:DB_LOAD_ROLE_DATA_RESP.RoleData)
  
  ::RoleData* temp = roledata_;
  roledata_ = nullptr;
  return temp;
}
inline ::RoleData* DB_LOAD_ROLE_DATA_RESP::_internal_mutable_roledata() {
  
  if (roledata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoleData>(GetArenaNoVirtual());
    roledata_ = p;
  }
  return roledata_;
}
inline ::RoleData* DB_LOAD_ROLE_DATA_RESP::mutable_roledata() {
  // @@protoc_insertion_point(field_mutable:DB_LOAD_ROLE_DATA_RESP.RoleData)
  return _internal_mutable_roledata();
}
inline void DB_LOAD_ROLE_DATA_RESP::set_allocated_roledata(::RoleData* roledata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roledata_;
  }
  if (roledata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roledata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roledata, submessage_arena);
    }
    
  } else {
    
  }
  roledata_ = roledata;
  // @@protoc_insertion_point(field_set_allocated:DB_LOAD_ROLE_DATA_RESP.RoleData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dbservice_2eproto
