syntax = "proto3";
package cluster.protocol;



enum emN2RProtocolType
{
    N2R_PROTOCOL_NONE = 0;
    N2R_KEEPALIVE_REQ = 1;
    N2R_HANDSHAKE_REQ = 2;
    N2R_REGISTER_METHOD_REQ = 3;
    N2R_GET_NODES_INFO_REQ = 4;
    N2R_PROTOCOL_SIZE = 5;
}

enum emR2NProtocolType {
    R2N_PROTOCOL_NONE = 0;
    R2N_KEEPALIVE_RESP = 1;
    R2N_HANDSHAKE_RESP = 2;
    R2N_REGISTER_METHOD_RESP = 3;
    R2N_GET_NODES_INFO_RESP = 4;
    R2N_PROTOCOL_SIZE = 5;
}

enum emC2SProtocolType {
    C2S_PROTOCOL_NONE = 0;
    C2S_CALL_METHOD_REQ = 1;
    C2S_CALL_METHOD_RESP = 2;
    C2S_PROTOCOL_SIZE = 3;
}

enum emS2CProtocolType {
    S2C_PROTOCOL_NONE = 0;
    S2C_CALL_METHOD_RESP = 1;
    S2C_PROTOCOL_SIZE = 2;
}

enum emC2RProtocolType {
    C2R_PROTOCOL_NONE = 0;
    C2R_GET_NODES_INFO_REQ = 1;
    C2R_PROTOCOL_SIZE = 2;
}

enum emR2CProtocolType {
    R2C_PROTOCOL_NONE = 0;
    R2C_GET_NODES_INFO_RESP = 1;
    R2C_PROTOCOL_SIZE = 2;
}

enum emRegisterMethodErr
{
    SUCC = 0;
    FAILED = 1;
};

enum emHandshakeErr
{
    HANDSHAKE_SUCC = 0;
    HANDSHAKE_FAILED = 1;
};

// common
message NodeInfo
{
    bytes           uuid = 1;
    string          ip = 2;
    int32           port = 3;
    repeated string methods = 4;
}

// N2R
message N2RProtocolHead
{
    bytes           uuid = 1;
}

message R2NProtocolHead
{
    bytes           uuid = 1;
}

message C2RProtocolHead
{
    bytes           uuid = 1;
}

message C2SProtocolHead
{
    bytes           uuid = 1;
}

message N2R_KeepAlive_Req
{
    N2RProtocolHead head = 1;
}

message N2R_Handshake_Req
{
    N2RProtocolHead head = 1;
    string          ip = 3;
    int32           port = 4;
}

message N2R_RegisterMethod_Req
{
    N2RProtocolHead head = 1;
    repeated string methods = 2;
}

message C2R_GetNodesInfo_Req
{
    C2RProtocolHead head = 1;
}

message R2N_KeepAlive_Resp
{
    R2NProtocolHead head = 1;
}

message R2N_Handshake_Resp
{
    R2NProtocolHead head = 1;
    emHandshakeErr  err = 2;
}

message R2N_RegisterMethod_Resp
{
    emRegisterMethodErr err = 1;
}

message R2C_GetNodesInfo_Resp
{
    repeated NodeInfo nodes = 2;
}

enum emC2SCallMethodErr
{
    CALL_METHOD_SUCC = 0;
    CALL_METHOD_FAILED = 1;
};

message C2S_CallMethod_Req
{
    C2SProtocolHead head = 1;
    string          method = 2;
    bytes           params = 4;
}

message S2C_CallMethod_Resp
{
    C2SProtocolHead head = 1;
    emC2SCallMethodErr err = 2;
    string             errmsg = 3;
    bytes           results = 4;
}