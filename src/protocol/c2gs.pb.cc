// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2gs.proto

#include "c2gs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class C2GS_Test_Echo_ReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2GS_Test_Echo_Req> _instance;
} _C2GS_Test_Echo_Req_default_instance_;
class C2GS_ON_LOGIN_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2GS_ON_LOGIN_REQ> _instance;
} _C2GS_ON_LOGIN_REQ_default_instance_;
static void InitDefaultsscc_info_C2GS_ON_LOGIN_REQ_c2gs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2GS_ON_LOGIN_REQ_default_instance_;
    new (ptr) ::C2GS_ON_LOGIN_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2GS_ON_LOGIN_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2GS_ON_LOGIN_REQ_c2gs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2GS_ON_LOGIN_REQ_c2gs_2eproto}, {}};

static void InitDefaultsscc_info_C2GS_Test_Echo_Req_c2gs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_C2GS_Test_Echo_Req_default_instance_;
    new (ptr) ::C2GS_Test_Echo_Req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::C2GS_Test_Echo_Req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2GS_Test_Echo_Req_c2gs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2GS_Test_Echo_Req_c2gs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_c2gs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_c2gs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_c2gs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_c2gs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2GS_Test_Echo_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::C2GS_Test_Echo_Req, field_handleid_),
  PROTOBUF_FIELD_OFFSET(::C2GS_Test_Echo_Req, field_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2GS_ON_LOGIN_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::C2GS_ON_LOGIN_REQ, field_handleid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::C2GS_Test_Echo_Req)},
  { 7, -1, sizeof(::C2GS_ON_LOGIN_REQ)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_C2GS_Test_Echo_Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_C2GS_ON_LOGIN_REQ_default_instance_),
};

const char descriptor_table_protodef_c2gs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nc2gs.proto\"C\n\022C2GS_Test_Echo_Req\022\026\n\016Fi"
  "eld_HandleID\030\001 \001(\005\022\025\n\rField_Message\030\002 \001("
  "\t\"+\n\021C2GS_ON_LOGIN_REQ\022\026\n\016Field_HandleID"
  "\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_c2gs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_c2gs_2eproto_sccs[2] = {
  &scc_info_C2GS_ON_LOGIN_REQ_c2gs_2eproto.base,
  &scc_info_C2GS_Test_Echo_Req_c2gs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_c2gs_2eproto_once;
static bool descriptor_table_c2gs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_c2gs_2eproto = {
  &descriptor_table_c2gs_2eproto_initialized, descriptor_table_protodef_c2gs_2eproto, "c2gs.proto", 134,
  &descriptor_table_c2gs_2eproto_once, descriptor_table_c2gs_2eproto_sccs, descriptor_table_c2gs_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_c2gs_2eproto::offsets,
  file_level_metadata_c2gs_2eproto, 2, file_level_enum_descriptors_c2gs_2eproto, file_level_service_descriptors_c2gs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_c2gs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_c2gs_2eproto), true);

// ===================================================================

void C2GS_Test_Echo_Req::InitAsDefaultInstance() {
}
class C2GS_Test_Echo_Req::_Internal {
 public:
};

C2GS_Test_Echo_Req::C2GS_Test_Echo_Req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2GS_Test_Echo_Req)
}
C2GS_Test_Echo_Req::C2GS_Test_Echo_Req(const C2GS_Test_Echo_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_message().empty()) {
    field_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_message_);
  }
  field_handleid_ = from.field_handleid_;
  // @@protoc_insertion_point(copy_constructor:C2GS_Test_Echo_Req)
}

void C2GS_Test_Echo_Req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2GS_Test_Echo_Req_c2gs_2eproto.base);
  field_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_handleid_ = 0;
}

C2GS_Test_Echo_Req::~C2GS_Test_Echo_Req() {
  // @@protoc_insertion_point(destructor:C2GS_Test_Echo_Req)
  SharedDtor();
}

void C2GS_Test_Echo_Req::SharedDtor() {
  field_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2GS_Test_Echo_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2GS_Test_Echo_Req& C2GS_Test_Echo_Req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2GS_Test_Echo_Req_c2gs_2eproto.base);
  return *internal_default_instance();
}


void C2GS_Test_Echo_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:C2GS_Test_Echo_Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_handleid_ = 0;
  _internal_metadata_.Clear();
}

const char* C2GS_Test_Echo_Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Field_HandleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_handleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Field_Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_field_message(), ptr, ctx, "C2GS_Test_Echo_Req.Field_Message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2GS_Test_Echo_Req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2GS_Test_Echo_Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Field_HandleID = 1;
  if (this->field_handleid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_handleid(), target);
  }

  // string Field_Message = 2;
  if (this->field_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_message().data(), static_cast<int>(this->_internal_field_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2GS_Test_Echo_Req.Field_Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2GS_Test_Echo_Req)
  return target;
}

size_t C2GS_Test_Echo_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2GS_Test_Echo_Req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Field_Message = 2;
  if (this->field_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_message());
  }

  // int32 Field_HandleID = 1;
  if (this->field_handleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_handleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2GS_Test_Echo_Req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2GS_Test_Echo_Req)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GS_Test_Echo_Req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2GS_Test_Echo_Req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2GS_Test_Echo_Req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2GS_Test_Echo_Req)
    MergeFrom(*source);
  }
}

void C2GS_Test_Echo_Req::MergeFrom(const C2GS_Test_Echo_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2GS_Test_Echo_Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_message().size() > 0) {

    field_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_message_);
  }
  if (from.field_handleid() != 0) {
    _internal_set_field_handleid(from._internal_field_handleid());
  }
}

void C2GS_Test_Echo_Req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2GS_Test_Echo_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Test_Echo_Req::CopyFrom(const C2GS_Test_Echo_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2GS_Test_Echo_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Test_Echo_Req::IsInitialized() const {
  return true;
}

void C2GS_Test_Echo_Req::InternalSwap(C2GS_Test_Echo_Req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_message_.Swap(&other->field_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_handleid_, other->field_handleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2GS_Test_Echo_Req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2GS_ON_LOGIN_REQ::InitAsDefaultInstance() {
}
class C2GS_ON_LOGIN_REQ::_Internal {
 public:
};

C2GS_ON_LOGIN_REQ::C2GS_ON_LOGIN_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2GS_ON_LOGIN_REQ)
}
C2GS_ON_LOGIN_REQ::C2GS_ON_LOGIN_REQ(const C2GS_ON_LOGIN_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_handleid_ = from.field_handleid_;
  // @@protoc_insertion_point(copy_constructor:C2GS_ON_LOGIN_REQ)
}

void C2GS_ON_LOGIN_REQ::SharedCtor() {
  field_handleid_ = 0;
}

C2GS_ON_LOGIN_REQ::~C2GS_ON_LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:C2GS_ON_LOGIN_REQ)
  SharedDtor();
}

void C2GS_ON_LOGIN_REQ::SharedDtor() {
}

void C2GS_ON_LOGIN_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2GS_ON_LOGIN_REQ& C2GS_ON_LOGIN_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2GS_ON_LOGIN_REQ_c2gs_2eproto.base);
  return *internal_default_instance();
}


void C2GS_ON_LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:C2GS_ON_LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_handleid_ = 0;
  _internal_metadata_.Clear();
}

const char* C2GS_ON_LOGIN_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Field_HandleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_handleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2GS_ON_LOGIN_REQ::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2GS_ON_LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Field_HandleID = 1;
  if (this->field_handleid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_handleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2GS_ON_LOGIN_REQ)
  return target;
}

size_t C2GS_ON_LOGIN_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2GS_ON_LOGIN_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Field_HandleID = 1;
  if (this->field_handleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_handleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2GS_ON_LOGIN_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2GS_ON_LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const C2GS_ON_LOGIN_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2GS_ON_LOGIN_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2GS_ON_LOGIN_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2GS_ON_LOGIN_REQ)
    MergeFrom(*source);
  }
}

void C2GS_ON_LOGIN_REQ::MergeFrom(const C2GS_ON_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2GS_ON_LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_handleid() != 0) {
    _internal_set_field_handleid(from._internal_field_handleid());
  }
}

void C2GS_ON_LOGIN_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2GS_ON_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ON_LOGIN_REQ::CopyFrom(const C2GS_ON_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2GS_ON_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ON_LOGIN_REQ::IsInitialized() const {
  return true;
}

void C2GS_ON_LOGIN_REQ::InternalSwap(C2GS_ON_LOGIN_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_handleid_, other->field_handleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2GS_ON_LOGIN_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::C2GS_Test_Echo_Req* Arena::CreateMaybeMessage< ::C2GS_Test_Echo_Req >(Arena* arena) {
  return Arena::CreateInternal< ::C2GS_Test_Echo_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::C2GS_ON_LOGIN_REQ* Arena::CreateMaybeMessage< ::C2GS_ON_LOGIN_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::C2GS_ON_LOGIN_REQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
